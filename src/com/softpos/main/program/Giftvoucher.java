package com.softpos.main.program;

import com.softpos.main.model.Value;
import com.softpos.main.model.PublicVar;
import java.awt.Color;
import java.awt.Font;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import database.MySQLConnect;
import java.sql.PreparedStatement;
import java.sql.Statement;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import util.MSG;

public class Giftvoucher extends javax.swing.JDialog {

    DefaultTableModel model;
    SimpleDateFormat Datefmtshow = new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH);
    Double GiftAmt;

    /**
     * Creates new form Giftvoucher
     */
    public Giftvoucher(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();
        PublicVar.ReturnString = "";
        model = (DefaultTableModel) tblShow.getModel();
        tblShow.setShowGrid(true);
        tblShow.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblShow.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblShow.setRowSelectionAllowed(true);
        tblShow.setGridColor(Color.gray);

        JTableHeader header = tblShow.getTableHeader();
        header.setBackground(Color.yellow);
        header.setFont(new java.awt.Font("Norasi", java.awt.Font.PLAIN, 16));

        int[] ColSize = {60, 50, 50, 100, 200, 80, 90};
        for (int i = 0; i < 7; i++) {
            int vColIndex = 0;
            TableColumn col = tblShow.getColumnModel().getColumn(i);
            col.setPreferredWidth(ColSize[i]);
        }
        DecimalFormat DoubleFmt = new DecimalFormat("##,###,##0.00");
        DecimalFormat IntegerFmt = new DecimalFormat("##,###,##0");
        DecimalFormat PersentFmt = new DecimalFormat("#,##0.00%");
        ActivateModuel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        TGiftNo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblShow = new javax.swing.JTable();
        bntClearAll = new javax.swing.JButton();
        bntOK = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("รายการบัตรกำนัล/บัตรของขวัญ (Giftvouchar)");
        setUndecorated(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        jLabel1.setText("Barcode");

        TGiftNo.setFont(new java.awt.Font("Norasi", 1, 14)); // NOI18N
        TGiftNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TGiftNoKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TGiftNo, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(369, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TGiftNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblShow.setFont(new java.awt.Font("Norasi", 0, 16)); // NOI18N
        tblShow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ประเภท", "แบบ", "ล็อต", "วันหมดอายุ", "Code", "NO #", "จำนวนเงิน"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblShow.setRequestFocusEnabled(false);
        tblShow.setRowHeight(35);
        tblShow.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblShowKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblShow);

        bntClearAll.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bntClearAll.setText("F3-Clear All");
        bntClearAll.setMargin(new java.awt.Insets(1, 1, 1, 1));
        bntClearAll.setRequestFocusEnabled(false);
        bntClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntClearAllActionPerformed(evt);
            }
        });

        bntOK.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bntOK.setText("F5-จบการทำงาน");
        bntOK.setMargin(new java.awt.Insets(1, 1, 1, 1));
        bntOK.setRequestFocusEnabled(false);
        bntOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(bntClearAll, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntOK, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bntClearAll, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bntOK, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(634, 309));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

private void bntClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntClearAllActionPerformed
    bntClearAllClick();
}//GEN-LAST:event_bntClearAllActionPerformed

private void bntOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntOKActionPerformed
    bntOKClick();
}//GEN-LAST:event_bntOKActionPerformed

private void TGiftNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TGiftNoKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
        bntOKClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        TGiftNoExit();
    }
    if (evt.getKeyCode() == KeyEvent.VK_F5) {
        bntOKClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_F3) {
        bntClearAllClick();
    }

}//GEN-LAST:event_TGiftNoKeyPressed

private void tblShowKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblShowKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_F5) {
        bntOKClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_F3) {
        bntClearAllClick();
    }
}//GEN-LAST:event_tblShowKeyPressed
    public void bntOKClick() {
        this.dispose();
    }

    public void bntClearAllClick() {
        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String DeleteGift = "delete from tempgift where (macno=?) ";
            PreparedStatement prm = mysql.getConnection().prepareStatement(DeleteGift);
            prm.setString(1, Value.MACNO);
            prm.executeUpdate();
            stmt.close();
            ClearGrid();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
        } finally {
            mysql.close();
        }

        TGiftNo.setText("");
    }

    public void ActivateModuel() {
        TGiftNo.setText("");
        ClearGrid();
        ShowDataToGrid();
    }

    public void ClearGrid() {
        int RowCount = model.getRowCount();
        for (int i = 0; i <= RowCount - 1; i++) {
            model.removeRow(0);
        }
    }

    public void TGiftNoExit() {
        String GiftBarcode = TGiftNo.getText().trim();
        if (!GiftBarcode.equals("")) {
            if ((GiftBarcode.length() == 20) || (GiftBarcode.length() == 26)) {
                GetValidVoucher(GiftBarcode);
                TGiftNo.setText("");
                TGiftNo.requestFocus();
            } else {
                MSG.ERR("Barcode บัตรกำนัล/บัตรของขวัญ ไม่ถูกต้อง...");
                TGiftNo.setText("");
                TGiftNo.requestFocus();
            }
        }
        ShowDataToGrid();
    }

    public void GetValidVoucher(String GiftBarcode) {
        String GiftType = GiftBarcode.substring(0, 2);
        String GiftPrice = GiftBarcode.substring(2, 5);
        String GiftModel = GiftBarcode.substring(5, 8);
        String GiftLot = GiftBarcode.substring(8, 13);
        String GiftExp = GiftBarcode.substring(13, 19);
        System.out.println(GiftType + ".." + GiftPrice + ".." + GiftModel + ".." + GiftLot + ".." + GiftExp);
        String yy = GiftExp.substring(0, 2);
        String mm = GiftExp.substring(2, 4);
        String dd = GiftExp.substring(4, 6);
        String GiftExp2 = dd + "-" + mm + "-" + yy;
        String GiftCode = GiftBarcode.substring(0, 19);
        String GiftNo = "";
        if (GiftBarcode.length() == 26) {
            GiftNo = GiftBarcode.substring(19, 26);
        } else {
            GiftNo = "";
        }
        if (GiftBarcode.length() == 26) {
            if (PublicVar.Branch_GiftStatusChk.equals("Y")) {
                if (SeekGiftStatus(GiftCode, GiftNo)) {
                    if (SeekGiftPrice(GiftPrice)) {
                        if (!GiftExp.equals("000000")) {
                            if (ChkExpDate(GiftExp, GiftExp2)) {
                                /**
                                 * * OPEN CONNECTION **
                                 */
                                MySQLConnect mysql = new MySQLConnect();
                                mysql.open();
                                try {
                                    Statement stmt = mysql.getConnection().createStatement();
                                    String InsertGift = "insert into tempgift (macno,giftbarcode,gifttype,giftprice,giftmodel,giftlot,giftexp,giftcode,giftno,giftamt) "
                                            + "values (?,?,?,?,?,?,?,?,?,?)";
                                    PreparedStatement prm11 = mysql.getConnection().prepareStatement(InsertGift);
                                    prm11.setString(1, Value.MACNO);
                                    prm11.setString(2, GiftBarcode);
                                    prm11.setString(3, GiftType);
                                    prm11.setString(4, GiftPrice);
                                    prm11.setString(5, GiftModel);
                                    prm11.setString(6, GiftLot);
                                    prm11.setString(7, GiftExp2);
                                    prm11.setString(8, GiftCode);
                                    prm11.setString(9, GiftNo);
                                    prm11.setDouble(10, GiftAmt);
                                    prm11.executeUpdate();
                                    stmt.close();
                                } catch (SQLException e) {
                                    MSG.ERR(e.getMessage());
                                } finally {
                                    mysql.close();
                                }
                            }
                        } else {
                            /**
                             * * OPEN CONNECTION **
                             */
                            MySQLConnect mysql = new MySQLConnect();
                            mysql.open();
                            try {
                                Statement stmt = mysql.getConnection().createStatement();
                                String InsertGift = "insert into tempgift (macno,giftbarcode,gifttype,giftprice,giftmodel,giftlot,giftexp,giftcode,giftno,giftamt) "
                                        + "values (?,?,?,?,?,?,?,?,?,?)";
                                PreparedStatement prm11 = mysql.getConnection().prepareStatement(InsertGift);
                                prm11.setString(1, Value.MACNO);
                                prm11.setString(2, GiftBarcode);
                                prm11.setString(3, GiftType);
                                prm11.setString(4, GiftPrice);
                                prm11.setString(5, GiftModel);
                                prm11.setString(6, GiftLot);
                                prm11.setString(7, GiftExp2);
                                prm11.setString(8, GiftCode);
                                prm11.setString(9, GiftNo);
                                prm11.setDouble(10, GiftAmt);
                                prm11.executeUpdate();
                                stmt.close();
                            } catch (SQLException e) {
                                MSG.ERR(e.getMessage());
                            } finally {
                                mysql.close();
                            }
                        }
                    }
                }
            }
        } else {
            if (SeekGiftPrice(GiftPrice)) {
                if (!GiftExp.equals("000000")) {
                    if (ChkExpDate(GiftExp, GiftExp2)) {
                        /**
                         * * OPEN CONNECTION **
                         */
                        MySQLConnect mysql = new MySQLConnect();
                        mysql.open();
                        try {
                            Statement stmt = mysql.getConnection().createStatement();
                            String InsertGift = "insert into tempgift (macno,giftbarcode,gifttype,giftprice,giftmodel,giftlot,giftexp,giftcode,giftno,giftamt) "
                                    + "values (?,?,?,?,?,?,?,?,?,?)";
                            PreparedStatement prm11 = mysql.getConnection().prepareStatement(InsertGift);
                            prm11.setString(1, Value.MACNO);
                            prm11.setString(2, GiftBarcode);
                            prm11.setString(3, GiftType);
                            prm11.setString(4, GiftPrice);
                            prm11.setString(5, GiftModel);
                            prm11.setString(6, GiftLot);
                            prm11.setString(7, GiftExp2);
                            prm11.setString(8, GiftCode);
                            prm11.setString(9, GiftNo);
                            prm11.setDouble(10, GiftAmt);
                            prm11.executeUpdate();
                            stmt.close();
                        } catch (SQLException e) {
                            MSG.ERR(e.getMessage());
                        } finally {
                            mysql.close();
                        }
                    }
                } else {
                    /**
                     * * OPEN CONNECTION **
                     */
                    MySQLConnect mysql = new MySQLConnect();
                    mysql.open();
                    try {
                        Statement stmt = mysql.getConnection().createStatement();
                        String InsertGift = "insert into tempgift (macno,giftbarcode,gifttype,giftprice,giftmodel,giftlot,giftexp,giftcode,giftno,giftamt) "
                                + "values (?,?,?,?,?,?,?,?,?,?)";
                        PreparedStatement prm11 = mysql.getConnection().prepareStatement(InsertGift);
                        prm11.setString(1, Value.MACNO);
                        prm11.setString(2, GiftBarcode);
                        prm11.setString(3, GiftType);
                        prm11.setString(4, GiftPrice);
                        prm11.setString(5, GiftModel);
                        prm11.setString(6, GiftLot);
                        prm11.setString(7, GiftExp2);
                        prm11.setString(8, GiftCode);
                        prm11.setString(9, GiftNo);
                        prm11.setDouble(10, GiftAmt);
                        prm11.executeUpdate();
                        stmt.close();
                    } catch (SQLException e) {
                        MSG.ERR(e.getMessage());
                    }finally{
                        mysql.close();
                    }
                }
            }
        }

    }

    public Boolean SeekGiftStatus(String GiftCode, String GiftNo) {
        Boolean ReturnValue = false;
        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SQLQuery = "select *from giftstatus where (gcode='" + GiftCode + "') and (gno= '" + GiftNo + "') ";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
                MSG.ERR("บัตรของขวัญนี้ยังไม่มีการลงทะเบียบจากสำนักงานใหญ่...ไม่สามารถนำมาใช้บริการได้...");
                ReturnValue
                        = false;
            } else {
                ReturnValue = true;
            }

            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
        }finally{
            mysql.close();
        }

        return ReturnValue;
    }

    public Boolean SeekGiftPrice(String GiftPrice) {
        Boolean ReturnValue = false;
        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SQLQuery = "select *from giftprice where (pricecode='" + GiftPrice + "')";
            ResultSet rec = stmt.executeQuery(SQLQuery);
            rec.first();
            if (rec.getRow() == 0) {
                MSG.ERR("รหัสราคาบัตรกำนัล/บัตรของขัวญ ไม่ถูกต้อง...");
                GiftAmt
                        = 0.0;
                ReturnValue
                        = false;
            } else {
                GiftAmt = rec.getDouble("priceamt");
                ReturnValue
                        = true;
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
        }finally{
            mysql.close();
        }
        
        return ReturnValue;
    }

    public Boolean ChkExpDate(String GiftExp, String GiftExp2) {
        Date date = new Date();
        SimpleDateFormat DateChk = new SimpleDateFormat("yyMMdd", Locale.ENGLISH);
        String CurDate = DateChk.format(date);//"091201" ;
        if (CurDate.compareTo(GiftExp) > 0) {
            MSG.ERR(this, "บัตรหมดอายุการใช่งานแล้วตั้งแต่วันที่ " + GiftExp2);
            return false;
        } else {
            return true;
        }
    }

    public void ShowDataToGrid() {
        ClearGrid();
        int LineCnt = 1;
        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String LoadTempGift = "select *from tempgift where macno='" + Value.MACNO + "'";
            ResultSet rec = stmt.executeQuery(LoadTempGift);
            Date dt = new Date();
            ClearGrid();
            rec.first();
            if (rec.getRow() == 0) {

            } else {
                do {
                    try {
                        Object[] input = {
                            rec.getString("gifttype"),
                            rec.getString("giftmodel"),
                            rec.getString("giftlot"),
                            rec.getString("giftexp"),
                            rec.getString("giftbarcode"),
                            rec.getString("giftno"),
                            rec.getDouble("giftamt")
                        };
                        model.addRow(input);
                    } catch (SQLException e) {
                    }
                    LineCnt++;
                } while (rec.next());
                showCell(0, 0);
                //ShowTableLogin.setRowSelectionInterval(0, 0);
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
        }finally{
            mysql.close();
        }

    }

    public void showCell(int row, int column) {
        if (row > 0) {
            Rectangle rect = tblShow.getCellRect(row, column, true);
            tblShow.scrollRectToVisible(rect);
            tblShow.clearSelection();
            tblShow.setRowSelectionInterval(row, row);
        }
    }

    /**
     * @param args the command line argument
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Giftvoucher dialog = new Giftvoucher(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField TGiftNo;
    private javax.swing.JButton bntClearAll;
    private javax.swing.JButton bntOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblShow;
    // End of variables declaration//GEN-END:variables
}
