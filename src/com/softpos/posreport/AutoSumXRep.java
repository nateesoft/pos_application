package com.softpos.posreport;

import java.awt.event.KeyEvent;
import database.MySQLConnect;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import com.softpos.main.program.CreditRec;
import com.softpos.main.program.FinalcialRec;
import com.softpos.main.program.HourlyRec;
import com.softpos.main.program.POSHWSetup;
import com.softpos.main.program.PPrint;
import com.softpos.main.program.PUtility;
import com.softpos.main.program.PluRec;
import com.softpos.main.program.PublicVar;
import com.softpos.main.program.Value;
import util.MSG;

public class AutoSumXRep extends javax.swing.JDialog {

    SimpleDateFormat DatefmtThai = new SimpleDateFormat("dd/MM/yyyy(HH:mm)", Locale.ENGLISH);
    SimpleDateFormat Datefmt = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
    SimpleDateFormat SqlDateTimeFmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.ENGLISH);
    SimpleDateFormat ShowDatefmt = new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH);
    DecimalFormat DecFmt = new DecimalFormat("##,###,##0.00");
    DecimalFormat IntFmt = new DecimalFormat("##,###,##0");
    Date date = new Date();
    PPrint prn = new PPrint();
    private POSHWSetup POSHW;

    /**
     * Creates new form AutoSumXREp
     */
    public AutoSumXRep(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        POSHW = POSHWSetup.Bean(Value.getMacno());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        chkTerminal = new javax.swing.JCheckBox();
        chkCashier = new javax.swing.JCheckBox();
        chkGroup = new javax.swing.JCheckBox();
        chkPlu = new javax.swing.JCheckBox();
        chkHourly = new javax.swing.JCheckBox();
        chkReceipt = new javax.swing.JCheckBox();
        chkVoid = new javax.swing.JCheckBox();
        chkCredit = new javax.swing.JCheckBox();
        chkGiftVoucher = new javax.swing.JCheckBox();
        ChkCharge = new javax.swing.JCheckBox();
        bntSelectAll = new javax.swing.JButton();
        bntOK = new javax.swing.JButton();
        bntExit = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("รายงานยอดการขายรวมทุกเครื่อง Automatix Sum X-Report");
        setUndecorated(true);

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray, 2));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(241, 19, 19));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("รายงานยอดขายรวมทุกเครื่อง (All Terminal)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        chkTerminal.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chkTerminal.setText("รายงานยอดการเงินของเครื่อง (Terminal Report)");
        chkTerminal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkTerminalActionPerformed(evt);
            }
        });
        chkTerminal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chkTerminalKeyPressed(evt);
            }
        });

        chkCashier.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chkCashier.setText("รายงานยอดขายตามพนักงานขาย (Cashier Report)");
        chkCashier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCashierActionPerformed(evt);
            }
        });
        chkCashier.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chkCashierKeyPressed(evt);
            }
        });

        chkGroup.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chkGroup.setText("รายงานการขายตามกลุ่มสินค้า (Department/Group Report)");
        chkGroup.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chkGroupKeyPressed(evt);
            }
        });

        chkPlu.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chkPlu.setText("รายงานการขายตามรหัสสินค้า (PLU-Code Report)");
        chkPlu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chkPluKeyPressed(evt);
            }
        });

        chkHourly.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chkHourly.setText("รายงานการขายตามช่วงเวลา (Hourly Report)");
        chkHourly.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chkHourlyKeyPressed(evt);
            }
        });

        chkReceipt.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chkReceipt.setText("รายงานการขายตามบิล/ใบกำกับภาษีอย่างย่อ (Receipt Report)");
        chkReceipt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chkReceiptKeyPressed(evt);
            }
        });

        chkVoid.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chkVoid.setText("รายงานการทำรายการ Void (Void Report)");
        chkVoid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chkVoidKeyPressed(evt);
            }
        });

        chkCredit.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chkCredit.setText("รายงานการรับชำระด้วยบัตรเครดิต (Credit Report)");
        chkCredit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chkCreditKeyPressed(evt);
            }
        });

        chkGiftVoucher.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chkGiftVoucher.setText("รายงานการรับชำระด้วยบัตรของขวัญ (Gift Voucher Report)");
        chkGiftVoucher.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chkGiftVoucherKeyPressed(evt);
            }
        });

        ChkCharge.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ChkCharge.setText("รายงานการใช้ชาร์จประจำวัน (Daily Charge Report)");
        ChkCharge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ChkChargeKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ChkCharge)
                    .addComponent(chkGiftVoucher)
                    .addComponent(chkCredit)
                    .addComponent(chkVoid)
                    .addComponent(chkReceipt)
                    .addComponent(chkHourly)
                    .addComponent(chkPlu)
                    .addComponent(chkGroup)
                    .addComponent(chkCashier)
                    .addComponent(chkTerminal))
                .addContainerGap(165, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkTerminal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkCashier)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkGroup)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkPlu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkHourly)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkReceipt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkVoid)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkCredit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkGiftVoucher)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ChkCharge)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        bntSelectAll.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        bntSelectAll.setText("F2 เลือกทุกรายงาน");
        bntSelectAll.setFocusable(false);
        bntSelectAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bntSelectAllMouseClicked(evt);
            }
        });

        bntOK.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        bntOK.setText("F5 พิมพ์");
        bntOK.setFocusable(false);
        bntOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntOKActionPerformed(evt);
            }
        });

        bntExit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        bntExit.setText("ESC ออก");
        bntExit.setFocusable(false);
        bntExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bntExitMouseClicked(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(27, 23, 153));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("กด Enter เพื่อเลื่อนรายการ     กด Space bar เพื่อเลือก /ยกเลิก รายการที่ต้องการ ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(bntSelectAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntOK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bntSelectAll, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bntExit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bntOK, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 20, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

private void chkTerminalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkTerminalActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_chkTerminalActionPerformed

private void chkTerminalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chkTerminalKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_F2) {
        bntSelectAllClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_F5) {
        bntOKClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
        bntExitClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        chkCashier.requestFocus();
    }
}//GEN-LAST:event_chkTerminalKeyPressed

private void chkCashierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCashierActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_chkCashierActionPerformed

private void chkCashierKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chkCashierKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_F2) {
        bntSelectAllClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_F5) {
        bntOKClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
        bntExitClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        chkGroup.requestFocus();
    }
}//GEN-LAST:event_chkCashierKeyPressed

private void chkGroupKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chkGroupKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_F2) {
        bntSelectAllClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_F5) {
        bntOKClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
        bntExitClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        chkPlu.requestFocus();
    }
}//GEN-LAST:event_chkGroupKeyPressed

private void chkPluKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chkPluKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_F2) {
        bntSelectAllClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_F5) {
        bntOKClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
        bntExitClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        chkHourly.requestFocus();
    }
}//GEN-LAST:event_chkPluKeyPressed

private void chkHourlyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chkHourlyKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_F2) {
        bntSelectAllClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_F5) {
        bntOKClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
        bntExitClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        chkReceipt.requestFocus();
    }
}//GEN-LAST:event_chkHourlyKeyPressed

private void chkReceiptKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chkReceiptKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_F2) {
        bntSelectAllClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_F5) {
        bntOKClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
        bntExitClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        chkVoid.requestFocus();
    }
}//GEN-LAST:event_chkReceiptKeyPressed

private void chkVoidKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chkVoidKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_F2) {
        bntSelectAllClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_F5) {
        bntOKClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
        bntExitClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        chkCredit.requestFocus();
    }
}//GEN-LAST:event_chkVoidKeyPressed

private void chkCreditKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chkCreditKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_F2) {
        bntSelectAllClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_F5) {
        bntOKClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
        bntExitClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        chkGiftVoucher.requestFocus();
    }
}//GEN-LAST:event_chkCreditKeyPressed

private void chkGiftVoucherKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chkGiftVoucherKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_F2) {
        bntSelectAllClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_F5) {
        bntOKClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
        bntExitClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        chkTerminal.requestFocus();
    }
}//GEN-LAST:event_chkGiftVoucherKeyPressed

private void bntSelectAllMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bntSelectAllMouseClicked
    bntSelectAllClick();
}//GEN-LAST:event_bntSelectAllMouseClicked

private void bntExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bntExitMouseClicked
    bntExitClick();
}//GEN-LAST:event_bntExitMouseClicked

private void ChkChargeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ChkChargeKeyPressed
    // TODO add your handling code here:
    if (evt.getKeyCode() == KeyEvent.VK_F2) {
        bntSelectAllClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_F5) {
        bntOKClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
        bntExitClick();
    }
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        chkTerminal.requestFocus();
    }
}//GEN-LAST:event_ChkChargeKeyPressed

    private void bntOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntOKActionPerformed
        bntOKClick();
    }//GEN-LAST:event_bntOKActionPerformed
    public void bntSelectAllClick() {
        chkTerminal.setSelected(true);
        chkCashier.setSelected(true);
        chkGroup.setSelected(true);
        chkPlu.setSelected(true);
        chkHourly.setSelected(true);
        chkReceipt.setSelected(true);
        chkVoid.setSelected(true);
        chkCredit.setSelected(true);
        chkGiftVoucher.setSelected(true);
        ChkCharge.setSelected(true);

    }

    public void bntExitClick() {
        this.dispose();
    }

    public void UpdateOperation() {
        if (SeekOperation()) {
            UpdateOperationSale();
        } else {
            InsertOperationSale();
        }
    }

    public boolean SeekOperation() {
//        boolean RetVal = false;
//        try {
//            Statement stmt =  dbUtility.con.createStatement();
//            String LoadTableFile = "select *from dayoperation where operationdate = '" + Datefmt.format(PublicVar.SaleDate) + "'";
//            ResultSet rec = stmt.executeQuery(LoadTableFile);
//            rec.first();
//            if (rec.getRow() == 0) {
//                RetVal = false;
//            } else {
//                RetVal = true;
//            }
//            rec.close();
//            stmt.close();
//        } catch (SQLException e) {
//            JOptionPane.showMessageDialog(null, e.getMessage());
//        }
//        return RetVal;

        return true;
    }

    public void InsertOperationSale() {
//        Calendar CurDate = new GregorianCalendar();
//        try {
//            Statement stmt =  dbUtility.con.createStatement();
//            String UpdatePromotion = "insert into dayoperation (operationdate,autosum,autosumtime,autosumuser) values (?,?,?,?) ";
//            PreparedStatement prm =  dbUtility.con.prepareStatement(UpdatePromotion);
//            prm.setString(1, Datefmt.format(PublicVar.SaleDate));
//            prm.setString(2, "Y");
//            prm.setString(3, SqlDateTimeFmt.format(CurDate.getTime()));
//            prm.setString(4, PublicVar._User);
//            prm.executeUpdate();
//            stmt.close();
//        } catch (SQLException e) {
//            PUtility.ShowError(e.getMessage());
//        }
    }

    public void UpdateOperationSale() {
//        Calendar CurDate = new GregorianCalendar();
//        try {
//            Statement stmt =  dbUtility.con.createStatement();
//            String UpdatePromotion = "update dayoperation set autosum=?,autosumuser=?,autosumtime=? where operationdate=? ";
//            PreparedStatement prm =  dbUtility.con.prepareStatement(UpdatePromotion);
//            prm.setString(1, "Y");
//            prm.setString(2, PublicVar._User);
//            prm.setString(3, SqlDateTimeFmt.format(CurDate.getTime()));
//            prm.setString(4, Datefmt.format(PublicVar.SaleDate));
//            prm.executeUpdate();
//            stmt.close();
//        } catch (SQLException e) {
//            PUtility.ShowError(e.getMessage());
//        }
    }

    public void UpdateLastPrintSaleDate() {
        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String UpdatePromotion = "update branch set printautosumdate=? ";
            PreparedStatement prm = mysql.getConnection().prepareStatement(UpdatePromotion);
            prm.setString(1, Datefmt.format(PublicVar.SaleDate));
            prm.executeUpdate();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        } finally {
            mysql.close();
        }
    }

    public void bntOKClick() {
        if (ChkSaleData()) {
            if (ChkReadyPrint()) {
                if (ChkSaleNoCash()) {
                    if (ChkCashierSignOn()) {
                        if (ChkCashierClose()) {
                            if (!Value.getComPort().equals("NONE")) {
                                if (prn.OpenPrint(Value.getComPort())) {
                                    boolean ChkProcess = false;
                                    if (chkTerminal.isSelected()) {
                                        ProcessTerminal();
                                        ChkProcess = true;
                                    }
                                    if (chkCashier.isSelected()) {
                                        ProcessCashier();
                                        ChkProcess = true;
                                    }
                                    if (chkGroup.isSelected()) {
                                        ProcessGroup();
                                        ChkProcess = true;
                                    }
                                    if (chkPlu.isSelected()) {
                                        ProcessPlu();
                                        ChkProcess = true;
                                    }
                                    if (chkHourly.isSelected()) {
                                        ProcessHourly();
                                        ChkProcess = true;
                                    }
                                    if (chkReceipt.isSelected()) {
                                        ProcessInv();
                                        ChkProcess = true;
                                    }
                                    if (chkVoid.isSelected()) {
                                        ProcessVoid();
                                        ChkProcess = true;
                                    }
                                    if (chkCredit.isSelected()) {
                                        ProcessCredit();
                                        ChkProcess = true;
                                    }
                                    if (chkGiftVoucher.isSelected()) {
                                        ProcessGiftVoucher();
                                        ChkProcess = true;
                                    }
                                    if (ChkCharge.isSelected()) {
                                        ProcessCharge();
                                        ChkProcess = true;
                                    }
                                    prn.closePrint();
                                    //Update Operation File
                                    if (ChkProcess) {
                                        UpdateOperation();
                                        UpdateLastPrintSaleDate();
                                    }
                                } else {
                                    chkTerminal.requestFocus();
                                }
                            }
                        }
                    } else {
                        PUtility.ShowMsg("มีเครื่อง Cashier เครื่องอื่นเข้าระบบการขายอยู่...กรุณาปิด Cashier เครื่องอื่นออกจากระบบการขายทั้งหมด ก่อนทำการพิมพ์รายงานนี้ !!! ");
                        chkTerminal.requestFocus();
                    }

                } else {
                    PUtility.ShowMsg("ยังมียอดขายค้างอยู่ยังไม่ได้ชำระเงิน...กรุณาชำระเงินให้เรียบร้อยก่อนพิมพ์รายงาน ");
                    chkTerminal.requestFocus();
                }
            }
        } else {
            PUtility.ShowMsg("ไม่พบข้อมูลการขายสินค้าในแฟ้มข้อมูล...");
            chkTerminal.requestFocus();
        }

    }

    public boolean ChkReadyPrint() {
//        boolean RetVal = false;
//        try {
//            Statement stmt =  dbUtility.con.createStatement();
//            String LoadTableFile = "select *from dayoperation where operationdate = '" + Datefmt.format(PublicVar.SaleDate) + "'";
//            ResultSet rec = stmt.executeQuery(LoadTableFile);
//            rec.first();
//            if (rec.getRow() == 0) {
//                RetVal = true;
//            } else {
//                if (rec.getString("autosum").equals("Y")) {
//                    PUtility.ShowMsg("มีการพิมพ์รายงานสุรปยอดการขายอัตโนมัติรวมทุกเครื่องไปแล้ว โดย "+rec.getString("autosumuser")+" เมื่อ "+DatefmtThai.format(rec.getObject("autosumtime"))+" ไม่สามารถพิมพ์ได้อีก ..." ) ;
//                    RetVal = false;
//                } else {
//                    RetVal = true;
//                }
//            }
//            rec.close();
//            stmt.close();
//        } catch (SQLException e) {
//            JOptionPane.showMessageDialog(null, e.getMessage());
//        }
//        return RetVal;

        return true;
    }

    public boolean ChkSaleData() {
        boolean ReturnVal = false;
        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from billno";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
                ReturnVal = false;
            } else {
                ReturnVal = true;
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        } finally {
            mysql.close();
        }

        return ReturnVal;
    }

    public boolean ChkCashierSignOn() {
        boolean ReturnVal = false;
        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from posuser "
                    + "where OnAct='Y' and macno<>'" + Value.MACNO + "'";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
                ReturnVal = true;
            } else {
                ReturnVal = false;
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        } finally {
            mysql.close();
        }

        return ReturnVal;
    }

    public boolean ChkCashierClose() {
        boolean ReturnVal = false;
        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from billno where b_roundclose='N' group by b_cashier";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
                ReturnVal = true;
            } else {
                ReturnVal = false;
                String TempStr = "";
                do {
                    TempStr = TempStr + rec.getString("b_cashier") + " ";

                } while (rec.next());
                PUtility.ShowMsg("กรุณาปิดรอบ Cashier " + TempStr + " ก่อนทำการพิมพ์รายงานนี้...");
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        } finally {
            mysql.close();
        }

        return ReturnVal;
    }

    public boolean ChkSaleNoCash() {
        boolean ReturnVal = false;
        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from balance";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
                ReturnVal = true;
            } else {
                ReturnVal = false;
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
        } finally {
            mysql.close();
        }

        return ReturnVal;
    }

    public void ProcessTerminal() {
        FinalcialRec frec = new FinalcialRec();
        CreditRec[] CrArray;
        CrArray = null;

        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from billno  order by b_refno";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                frec.StBill = rec.getString("b_refno");
                do {
                    frec.SpBill = rec.getString("b_refno");
                    if (!rec.getString("b_void").equals("V")) {
                        frec.Dept_Sum = frec.Dept_Sum + rec.getDouble("b_total");
                        if (rec.getDouble("b_serviceamt") != 0.0) {
                            frec.Service = frec.Service + rec.getDouble("b_serviceamt");
                            frec.ServiceCnt++;
                        }
                        if (rec.getDouble("b_crchargeamt1") != 0.0) {
                            frec.Charge = frec.Charge + rec.getDouble("b_crchargeamt1");
                            frec.ChargeCnt++;
                        }
                        if (rec.getDouble("b_memdiscamt") != 0.0) {
                            frec.Vip_Disc = frec.Vip_Disc + rec.getDouble("b_memdiscamt");
                            frec.Vip_DiscCnt++;
                        }
                        if (rec.getDouble("b_empdiscamt") != 0.0) {
                            frec.Emp_Disc = frec.Emp_Disc + rec.getDouble("b_empdiscamt");
                            frec.Emp_DiscCnt++;
                        }
                        if (rec.getDouble("b_fastdiscamt") != 0.0) {
                            frec.Fast_Disc = frec.Fast_Disc + rec.getDouble("b_fastdiscamt");
                            frec.Fast_DiscCnt++;
                        }
                        if (rec.getDouble("b_Traindiscamt") != 0.0) {
                            frec.Train_Disc = frec.Train_Disc + rec.getDouble("b_traindiscamt");
                            frec.Train_DiscCnt++;
                        }
                        if (rec.getDouble("b_subdiscamt") != 0.0) {
                            frec.Sub_Disc = frec.Sub_Disc + rec.getDouble("b_subdiscamt");
                            frec.Sub_DiscCnt++;
                        }
                        if (rec.getDouble("b_subdiscbath") != 0.0) {
                            frec.Gen_Refund = frec.Gen_Refund + rec.getDouble("b_subdiscbath");
                            frec.Gen_RefundCnt++;
                        }
                        if (rec.getDouble("b_cupondiscamt") != 0.0) {
                            frec.Cupon_Disc = frec.Cupon_Disc + rec.getDouble("b_cupondiscamt");
                            frec.Cupon_DiscCnt++;
                        }
                        if (rec.getDouble("b_prodiscamt") != 0.0) {
                            frec.Promotion = frec.Promotion + rec.getDouble("b_prodiscamt");
                            frec.PromotionCnt++;
                        }
                        if (rec.getDouble("b_spadiscamt") != 0.0) {
                            frec.Spacial = frec.Spacial + rec.getDouble("b_spadiscamt");
                            frec.SpacialCnt++;
                        }
                        if (rec.getDouble("b_itemdiscamt") != 0.0) {
                            frec.Item_Disc = frec.Item_Disc + rec.getDouble("b_itemdiscamt");
                            frec.Item_DiscCnt++;
                        }
                        frec.Net_Sale = frec.Net_Sale + (rec.getDouble("b_nettotal") + rec.getDouble("b_crchargeamt1"));
                        if (rec.getDouble("b_cash") != 0.0) {
                            frec.Cash = frec.Cash + rec.getDouble("b_cash");
                            frec.CashCnt++;
                        }
                        if (rec.getDouble("b_giftvoucher") != 0.0) {
                            frec.Gift = frec.Gift + rec.getDouble("b_giftvoucher");
                            frec.GiftCnt++;
                        }
                        if (rec.getDouble("b_earnest") != 0.0) {
                            frec.Earnest = frec.Earnest + rec.getDouble("b_earnest");
                            frec.EarnestCnt++;
                        }
                        if (rec.getDouble("b_accramt") != 0.0) {
                            frec.ArPayment = frec.ArPayment + rec.getDouble("b_accramt");
                            frec.ArPaymentCnt++;
                        }
                        if (rec.getDouble("b_cramt1") != 0.0) {
                            frec.Credit_Card = frec.Credit_Card + rec.getDouble("b_cramt1");
                            frec.Credit_CardCnt++;
                        }
                        frec.SaleVat = frec.SaleVat + rec.getDouble("b_netvat");
                        frec.SaleNonVat = frec.SaleNonVat + rec.getDouble("b_netnonvat");
                        frec.VatAmt = frec.VatAmt + rec.getDouble("b_vat");
                        frec.CntBill++;
                        if (rec.getDouble("b_food") != 0.0) {
                            frec.Food = frec.Food + rec.getDouble("b_food");
                        }
                        if (rec.getDouble("b_drink") != 0.0) {
                            frec.Drink = frec.Drink + rec.getDouble("b_drink");
                        }
                        if (rec.getDouble("b_product") != 0.0) {
                            frec.Product = frec.Product + rec.getDouble("b_product");
                        }
                        if (rec.getInt("b_cust") != 0) {
                            frec.Customer = frec.Customer + rec.getInt("b_cust");
                        }
                        if (rec.getString("b_etd").equals("E")) {
                            frec.Eat_In_Cnt++;
                            frec.Eat_In_Amt = frec.Eat_In_Amt + rec.getDouble("b_total");
                            frec.Eat_In_Cust = frec.Eat_In_Cust + rec.getInt("b_cust");
                            frec.Eat_In_Net = frec.Eat_In_Net + rec.getDouble("b_nettotal");
                        }
                        if (rec.getString("b_etd").equals("T")) {
                            frec.Take_AwayCnt++;
                            frec.Take_AwayAmt = frec.Take_AwayAmt + rec.getDouble("b_total");
                            frec.Take_AwayCust = frec.Take_AwayCust + rec.getInt("b_cust");
                            frec.Take_AwayNet = frec.Take_AwayNet + rec.getDouble("b_nettotal");
                        }
                        if (rec.getString("b_etd").equals("D")) {
                            frec.DeliveryCnt++;
                            frec.DeliveryAmt = frec.DeliveryAmt + rec.getDouble("b_total");
                            frec.DeliveryCust = frec.DeliveryCust + rec.getInt("b_cust");
                            frec.DeliveryNet = frec.DeliveryNet + rec.getDouble("b_nettotal");
                        }
                        if (rec.getString("b_etd").equals("P")) {
                            frec.PintoCnt++;
                            frec.PintoAmt = frec.PintoAmt + rec.getDouble("b_total");
                            frec.PintoCust = frec.PintoCust + rec.getInt("b_cust");
                            frec.PintoNet = frec.PintoNet + rec.getDouble("b_nettotal");
                        }
                        if (rec.getString("b_etd").equals("W")) {
                            frec.WholeCnt++;
                            frec.WholeAmt = frec.WholeAmt + rec.getDouble("b_total");
                            frec.WholeCust = frec.WholeCust + rec.getInt("b_cust");
                            frec.WholeNet = frec.WholeNet + rec.getDouble("b_nettotal");
                        }
                    } else {
                        frec.AmtBillVoid = frec.AmtBillVoid + (rec.getDouble("b_nettotal") + rec.getDouble("b_crchargeamt1"));
                        frec.CntBillVoid++;
                        frec.CntBill++;
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        }

        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from paidiofile where (flage='I') ";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    frec.Paid_InCnt++;
                    frec.Paid_In = frec.Paid_In + rec.getDouble("paidinamt");
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
        }
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from paidiofile where (flage='O') ";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    frec.Paid_OutCnt++;
                    frec.Paid_Out = frec.Paid_Out + rec.getDouble("paidoutamt");
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
        }
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from t_sale where (r_void='V')";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    frec.CntVoid++;
                    frec.VoidValue = frec.VoidValue + rec.getDouble("r_total");
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
        }

        mysql.close();

        PrintTerminal(frec, CrArray);
    }

    public void PrintTerminal(FinalcialRec frec, CreditRec[] CrArray) {

        prn.InitPrinter();
        prn.print("   รายงานยอดการเงิน (Terminal Report)");
        prn.print("        Automatic Sum X-Report)   ");
        prn.print("หมายเลขเครื่อง : รวมทุกเครื่อง");
        Date dateP = new Date();
        prn.print(DatefmtThai.format(dateP) + " " + "Cashier:" + PublicVar._User + " Mac:" + Value.MACNO);
        prn.print("----------------------------------------");
        prn.print(PUtility.DataFullR("ยอดรวมค่าอาหาร                 ", 26) + PUtility.DataFull(DecFmt.format(frec.Food), 13));
        prn.print(PUtility.DataFullR("ยอดรวมค่าเครื่องดื่ม               ", 26) + PUtility.DataFull(DecFmt.format(frec.Drink), 13));
        prn.print(PUtility.DataFullR("ยอดรวมค่าสินค้าทั่วไป              ", 26) + PUtility.DataFull(DecFmt.format(frec.Product), 13));
        prn.print(PUtility.DataFullR("ยอดขายตามป้าย (Dept-Sum)       ", 26) + PUtility.DataFull(DecFmt.format(frec.Dept_Sum), 13));
        prn.print("                       ==============");
        prn.print(PUtility.DataFullR("ค่าบริการ Service       ", 20) + PUtility.DataFull(IntFmt.format(frec.ServiceCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Service), 13));
        prn.print(PUtility.DataFullR("Charge บัตรเครดิต       ", 20) + PUtility.DataFull(IntFmt.format(frec.ChargeCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Charge), 13));
        prn.print(PUtility.DataFullR("ส่วนลดสมาชิก VIP        ", 20) + PUtility.DataFull(IntFmt.format(frec.Vip_DiscCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Vip_Disc), 13));
        prn.print(PUtility.DataFullR("ส่วนลดเทศกาล           ", 20) + PUtility.DataFull(IntFmt.format(frec.Fast_DiscCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Fast_Disc), 13));
        prn.print(PUtility.DataFullR("ส่วนลดพนักงาน           ", 20) + PUtility.DataFull(IntFmt.format(frec.Emp_DiscCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Emp_Disc), 13));
        prn.print(PUtility.DataFullR("ส่วนลดพนักงาน Trainee   ", 20) + PUtility.DataFull(IntFmt.format(frec.Train_DiscCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Train_Disc), 13));
        prn.print(PUtility.DataFullR("ส่วนลดคูปอง              ", 20) + PUtility.DataFull(IntFmt.format(frec.Sub_DiscCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Sub_Disc), 13));
        prn.print(PUtility.DataFullR("ส่วนลดบาท               ", 20) + PUtility.DataFull(IntFmt.format(frec.Gen_RefundCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Gen_Refund), 13));
        prn.print(PUtility.DataFullR("ส่วนลด Promotion        ", 20) + PUtility.DataFull(IntFmt.format(frec.PromotionCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Promotion), 13));
        prn.print(PUtility.DataFullR("ส่วนลดพิเศษ (Special)    ", 20) + PUtility.DataFull(IntFmt.format(frec.SpacialCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Spacial), 13));
        prn.print(PUtility.DataFullR("ส่วนลดตามรายการ (Item)  ", 20) + PUtility.DataFull(IntFmt.format(frec.Item_DiscCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Item_Disc), 13));
        prn.print(PUtility.DataFullR("ส่วนลดบัตรคูปอง (Coupon)  ", 20) + PUtility.DataFull(IntFmt.format(frec.Cupon_DiscCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Cupon_Disc), 13));
        prn.print(PUtility.DataFullR("หักคืนเงินมัดจำ            ", 20) + PUtility.DataFull(IntFmt.format(frec.EarnestCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Earnest), 13));
        prn.print("----------------------------------------");
        prn.print(PUtility.DataFullR("ยอดขายสุทธิ (Net-Sales)           ", 26) + PUtility.DataFull(DecFmt.format(frec.Net_Sale), 13));
        prn.print("                       ==============");
        prn.print(PUtility.DataFullR("เงินสด Cash             ", 20) + PUtility.DataFull(IntFmt.format(frec.CashCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Cash), 13));
        prn.print(PUtility.DataFullR("บัตรกำนัล Gift Voucher   ", 20) + PUtility.DataFull(IntFmt.format(frec.GiftCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Gift), 13));
        prn.print(PUtility.DataFullR("ลูกหนี้การค้า              ", 20) + PUtility.DataFull(IntFmt.format(frec.ArPaymentCnt), 6) + PUtility.DataFull(DecFmt.format(frec.ArPayment), 13));
        if (frec.Credit_Card > 0) {
            if (CrArray != null) {
                int ArraySize = CrArray.length;
                for (int i = 0; i < ArraySize; i++) {
                    prn.print(PUtility.DataFullR(CrArray[i].CrName + "                     ", 20) + PUtility.DataFull(IntFmt.format(CrArray[i].CrCnt), 6) + PUtility.DataFull(DecFmt.format(CrArray[i].CrAmt), 13));
                }
            }
        }
        prn.print(PUtility.DataFullR("PAID-IN                ", 20) + PUtility.DataFull(IntFmt.format(frec.Paid_InCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Paid_In), 13));
        prn.print(PUtility.DataFullR("PAID-OUT               ", 20) + PUtility.DataFull(IntFmt.format(frec.Paid_OutCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Paid_Out), 13));
        prn.print("----------------------------------------");
        prn.print(PUtility.DataFullR("ยอดขายสินค้า/บริการ คิดภาษี       ", 26) + PUtility.DataFull(DecFmt.format(frec.SaleVat), 13));
        prn.print(PUtility.DataFullR("ยอดขายไม่คิดภาษี                ", 26) + PUtility.DataFull(DecFmt.format(frec.SaleNonVat), 13));
        prn.print(PUtility.DataFullR("ภาษีมูลค่าเพิ่ม (Vat)             ", 26) + PUtility.DataFull(DecFmt.format(frec.VatAmt), 13));
        prn.print("----------------------------------------");
        prn.print(PUtility.DataFullR("จำนวนลูกค้าทั้งสิ้น                ", 26) + PUtility.DataFull(IntFmt.format(frec.Customer), 8) + " คน");
        prn.print(PUtility.DataFullR("จำนวนใบกำกับภาษีอย่างย่อ         ", 26) + PUtility.DataFull(IntFmt.format(frec.CntBill), 8) + " ใบ");
        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select b_macno,min(b_refno),max(b_refno) from billno group by b_macno order by b_macno";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    prn.print("MacNo " + rec.getString("b_macno") + " เลขที่เริ่มต้น " + rec.getString("min(b_refno)") + " ถึง " + rec.getString("max(b_refno)"));

                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        }

        //prn.Print_Str("    เลขที่เริ่มต้น  :" + frec.StBill + "   ถึง  : " + frec.SpBill);
        prn.print(PUtility.DataFullR("ใบกำกับภาษีที่ยกเลิก       ", 20) + PUtility.DataFull(IntFmt.format(frec.CntBillVoid), 6) + PUtility.DataFull(DecFmt.format(frec.AmtBillVoid), 13));
        prn.print(PUtility.DataFullR("มูลค่าสินค้าที่ทำการ Void   ", 20) + PUtility.DataFull(IntFmt.format(frec.CntVoid), 6) + PUtility.DataFull(DecFmt.format(frec.VoidValue), 13));
        prn.print("----------------------------------------");
        prn.print("ประเภทการขาย   บิล        ลูกค้า  จำนวนเงิน");
        prn.print("----------------------------------------");
        prn.print("Eat-In      " + PUtility.DataFull(IntFmt.format(frec.Eat_In_Cnt), 6) + PUtility.DataFull(IntFmt.format(frec.Eat_In_Cust), 8) + PUtility.DataFull(DecFmt.format(frec.Eat_In_Amt), 13));
        prn.print("Take Away   " + PUtility.DataFull(IntFmt.format(frec.Take_AwayCnt), 6) + PUtility.DataFull(IntFmt.format(frec.Take_AwayCust), 8) + PUtility.DataFull(DecFmt.format(frec.Take_AwayAmt), 13));
        prn.print("Delivery    " + PUtility.DataFull(IntFmt.format(frec.DeliveryCnt), 6) + PUtility.DataFull(IntFmt.format(frec.DeliveryCust), 8) + PUtility.DataFull(DecFmt.format(frec.DeliveryAmt), 13));
        prn.print("Pinto       " + PUtility.DataFull(IntFmt.format(frec.PintoCnt), 6) + PUtility.DataFull(IntFmt.format(frec.PintoCust), 8) + PUtility.DataFull(DecFmt.format(frec.PintoAmt), 13));
        prn.print("Whole Sales " + PUtility.DataFull(IntFmt.format(frec.WholeCnt), 6) + PUtility.DataFull(IntFmt.format(frec.WholeCust), 8) + PUtility.DataFull(DecFmt.format(frec.WholeAmt), 13));
        prn.print("----------------------------------------");
        prn.print("");
        prn.print("");
        prn.print("");

        Double SumAmt = 0.0;
        prn.print("    รายงานการรับชำระจากลูกหนี้ภายนอก ");
        prn.print("          AR Payment Report");
        prn.print("หมายเลขเครื่อง : รวมทุกเครื่อง");
        prn.print(DatefmtThai.format(dateP) + " " + "Cashier:" + PublicVar._User + " Mac:" + Value.MACNO);
        prn.print("----------------------------------------");
        prn.print("AR Code    เลขที่ใบเสร็จรับเงิน/วันที่  จำนวนเงิน");
        prn.print("----------------------------------------");
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from t_ar where (fat<>'V') ";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    prn.print(PUtility.DataFull(rec.getString("arcode"), 4) + "  " + rec.getString("billno") + "  " + ShowDatefmt.format(rec.getDate("billdate")) + PUtility.DataFull(DecFmt.format(rec.getDouble("amount")), 9));
                    SumAmt = SumAmt + rec.getDouble("amount");
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
        }
        prn.print("----------------------------------------");
        prn.print(PUtility.DataFullR("Total Amount  ", 26) + PUtility.DataFull(DecFmt.format(SumAmt), 13));
        prn.print("----------------------------------------");
        prn.print("");
        Double SumCash = 0.0;
        Double SumCupon = 0.0;
        int CntBill = 0;
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from billar where (fat<>'V') ";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    CntBill++;
                    SumCash = SumCash + rec.getDouble("cash");
                    SumCupon = SumCupon + rec.getDouble("cupon");
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
        }
        prn.print(PUtility.DataFullR("     เงินสด Cash              ", 26) + PUtility.DataFull(DecFmt.format(SumCash), 13));
        prn.print(PUtility.DataFullR("     บัตรกำนัล Coupon          ", 26) + PUtility.DataFull(DecFmt.format(SumCupon), 13));
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from t_crar where (fat<>'V') ";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    prn.print(PUtility.DataFullR(PUtility.SeekCreditName(rec.getString("crcode") + "                "), 20) + PUtility.DataFull(IntFmt.format(rec.getInt("crcnt")), 6) + PUtility.DataFull(DecFmt.format(rec.getDouble("cramt")), 13));

                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
        }
        prn.print("ยอดรับชำระ AR    : " + PUtility.DataFull(IntFmt.format(CntBill), 6));
        prn.print("----------------------------------------");
        prn.print(" ");
        prn.print("ยอดยกเลิกรายการ การรับชำระจากลูกหนี้ภายนอก");
        prn.print("AR Pay-No    Amount  Mac  User User Void ");
        prn.print("----------------------------------------");
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from billar where (fat='V') ";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    prn.print(rec.getString("ref_no") + "  " + PUtility.DataFull(DecFmt.format(rec.getDouble("stotal")), 9) + "  " + rec.getString("terminal") + "  " + PUtility.DataFull(rec.getString("cashier"), 6) + "  " + PUtility.DataFull(rec.getString("uservoid"), 6));

                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
        }
        prn.print("----------------------------------------");
        prn.print("");
        prn.print("");
        prn.print("");
        prn.print(POSHW.getHeading1());
        prn.print(POSHW.getHeading2());
        prn.print(POSHW.getHeading3());
        prn.print(POSHW.getHeading4());
        prn.print("REG ID :" + Value.MACNO);
        prn.CutPaper();

        mysql.close();
    }

    public void ProcessCashier() {
        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select b_cashier,sum(b_nettotal) from billno group by b_cashier order by b_cashier";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    ProcessOneCashier(rec.getString("b_cashier"));
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        } finally {
            mysql.close();
        }
    }

    public void ProcessOneCashier(String TempCashNo) {

        FinalcialRec frec = new FinalcialRec();
        CreditRec[] CrArray;
        CrArray = null;

        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from billno where (b_cashier='" + TempCashNo + "')  order by b_refno";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                frec.StBill = rec.getString("b_refno");
                frec.Cashier1 = TempCashNo;
                do {
                    frec.SpBill = rec.getString("b_refno");
                    if (!rec.getString("b_void").equals("V")) {
                        frec.Dept_Sum = frec.Dept_Sum + rec.getDouble("b_total");
                        if (rec.getDouble("b_serviceamt") != 0.0) {
                            frec.Service = frec.Service + rec.getDouble("b_serviceamt");
                            frec.ServiceCnt++;
                        }
                        if (rec.getDouble("b_crchargeamt1") != 0.0) {
                            frec.Charge = frec.Charge + rec.getDouble("b_crchargeamt1");
                            frec.ChargeCnt++;
                        }
                        if (rec.getDouble("b_memdiscamt") != 0.0) {
                            frec.Vip_Disc = frec.Vip_Disc + rec.getDouble("b_memdiscamt");
                            frec.Vip_DiscCnt++;
                        }
                        if (rec.getDouble("b_empdiscamt") != 0.0) {
                            frec.Emp_Disc = frec.Emp_Disc + rec.getDouble("b_empdiscamt");
                            frec.Emp_DiscCnt++;
                        }
                        if (rec.getDouble("b_fastdiscamt") != 0.0) {
                            frec.Fast_Disc = frec.Fast_Disc + rec.getDouble("b_fastdiscamt");
                            frec.Fast_DiscCnt++;
                        }
                        if (rec.getDouble("b_Traindiscamt") != 0.0) {
                            frec.Train_Disc = frec.Train_Disc + rec.getDouble("b_traindiscamt");
                            frec.Train_DiscCnt++;
                        }
                        if (rec.getDouble("b_subdiscamt") != 0.0) {
                            frec.Sub_Disc = frec.Sub_Disc + rec.getDouble("b_subdiscamt");
                            frec.Sub_DiscCnt++;
                        }
                        if (rec.getDouble("b_subdiscbath") != 0.0) {
                            frec.Gen_Refund = frec.Gen_Refund + rec.getDouble("b_subdiscbath");
                            frec.Gen_RefundCnt++;
                        }
                        if (rec.getDouble("b_cupondiscamt") != 0.0) {
                            frec.Cupon_Disc = frec.Cupon_Disc + rec.getDouble("b_cupondiscamt");
                            frec.Cupon_DiscCnt++;
                        }
                        if (rec.getDouble("b_prodiscamt") != 0.0) {
                            frec.Promotion = frec.Promotion + rec.getDouble("b_prodiscamt");
                            frec.PromotionCnt++;
                        }
                        if (rec.getDouble("b_spadiscamt") != 0.0) {
                            frec.Spacial = frec.Spacial + rec.getDouble("b_spadiscamt");
                            frec.SpacialCnt++;
                        }
                        if (rec.getDouble("b_itemdiscamt") != 0.0) {
                            frec.Item_Disc = frec.Item_Disc + rec.getDouble("b_itemdiscamt");
                            frec.Item_DiscCnt++;
                        }
                        frec.Net_Sale = frec.Net_Sale + (rec.getDouble("b_nettotal") + rec.getDouble("b_crchargeamt1"));
                        if (rec.getDouble("b_cash") != 0.0) {
                            frec.Cash = frec.Cash + rec.getDouble("b_cash");
                            frec.CashCnt++;
                        }
                        if (rec.getDouble("b_giftvoucher") != 0.0) {
                            frec.Gift = frec.Gift + rec.getDouble("b_giftvoucher");
                            frec.GiftCnt++;
                        }
                        if (rec.getDouble("b_earnest") != 0.0) {
                            frec.Earnest = frec.Earnest + rec.getDouble("b_earnest");
                            frec.EarnestCnt++;
                        }
                        if (rec.getDouble("b_accramt") != 0.0) {
                            frec.ArPayment = frec.ArPayment + rec.getDouble("b_accramt");
                            frec.ArPaymentCnt++;
                        }
                        if (rec.getDouble("b_cramt1") != 0.0) {
                            frec.Credit_Card = frec.Credit_Card + rec.getDouble("b_cramt1");
                            frec.Credit_CardCnt++;
                        }
                        frec.SaleVat = frec.SaleVat + rec.getDouble("b_netvat");
                        frec.SaleNonVat = frec.SaleNonVat + rec.getDouble("b_netnonvat");
                        frec.VatAmt = frec.VatAmt + rec.getDouble("b_vat");
                        frec.CntBill++;
                        if (rec.getDouble("b_food") != 0.0) {
                            frec.Food = frec.Food + rec.getDouble("b_food");
                        }
                        if (rec.getDouble("b_drink") != 0.0) {
                            frec.Drink = frec.Drink + rec.getDouble("b_drink");
                        }
                        if (rec.getDouble("b_product") != 0.0) {
                            frec.Product = frec.Product + rec.getDouble("b_product");
                        }
                        if (rec.getInt("b_cust") != 0) {
                            frec.Customer = frec.Customer + rec.getInt("b_cust");
                        }
                        if (rec.getString("b_etd").equals("E")) {
                            frec.Eat_In_Cnt++;
                            frec.Eat_In_Amt = frec.Eat_In_Amt + rec.getDouble("b_total");
                            frec.Eat_In_Cust = frec.Eat_In_Cust + rec.getInt("b_cust");
                            frec.Eat_In_Net = frec.Eat_In_Net + rec.getDouble("b_nettotal");
                        }
                        if (rec.getString("b_etd").equals("T")) {
                            frec.Take_AwayCnt++;
                            frec.Take_AwayAmt = frec.Take_AwayAmt + rec.getDouble("b_total");
                            frec.Take_AwayCust = frec.Take_AwayCust + rec.getInt("b_cust");
                            frec.Take_AwayNet = frec.Take_AwayNet + rec.getDouble("b_nettotal");
                        }
                        if (rec.getString("b_etd").equals("D")) {
                            frec.DeliveryCnt++;
                            frec.DeliveryAmt = frec.DeliveryAmt + rec.getDouble("b_total");
                            frec.DeliveryCust = frec.DeliveryCust + rec.getInt("b_cust");
                            frec.DeliveryNet = frec.DeliveryNet + rec.getDouble("b_nettotal");
                        }
                        if (rec.getString("b_etd").equals("P")) {
                            frec.PintoCnt++;
                            frec.PintoAmt = frec.PintoAmt + rec.getDouble("b_total");
                            frec.PintoCust = frec.PintoCust + rec.getInt("b_cust");
                            frec.PintoNet = frec.PintoNet + rec.getDouble("b_nettotal");
                        }
                        if (rec.getString("b_etd").equals("W")) {
                            frec.WholeCnt++;
                            frec.WholeAmt = frec.WholeAmt + rec.getDouble("b_total");
                            frec.WholeCust = frec.WholeCust + rec.getInt("b_cust");
                            frec.WholeNet = frec.WholeNet + rec.getDouble("b_nettotal");
                        }
                    } else {
                        frec.AmtBillVoid = frec.AmtBillVoid + (rec.getDouble("b_nettotal") + rec.getDouble("b_crchargeamt1"));
                        frec.CntBillVoid++;
                        frec.CntBill++;
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        } finally {
            mysql.close();
        }

        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from paidiofile where (cashier='" + TempCashNo + "') and (flage='I')";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    frec.Paid_InCnt++;
                    frec.Paid_In = frec.Paid_In + rec.getDouble("paidinamt");
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        }
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from paidiofile where (cashier='" + TempCashNo + "') and (flage='O') ";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    frec.Paid_OutCnt++;
                    frec.Paid_Out = frec.Paid_Out + rec.getDouble("paidoutamt");
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        }
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from t_sale where (r_void='V') and (cashier='" + TempCashNo + "')";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    frec.CntVoid++;
                    frec.VoidValue = frec.VoidValue + rec.getDouble("r_total");
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        }

        mysql.close();

        PrintCashier(frec, CrArray, false);
    }

    public void PrintCashier(FinalcialRec frec, CreditRec[] CrArray, boolean ChkVoid) {

        prn.InitPrinter();
        prn.print("   รายงานพนักงานขาย (Cashier Report)");
        prn.print("       (Automatic Sum Xreport)");
        prn.print("หมายเลขเครื่อง : รวมทุกเครื่อง");
        prn.print("รหัสพนักงาน    : " + frec.Cashier1);
        Date dateP = new Date();
        prn.print(DatefmtThai.format(dateP) + " " + "Cashier:" + PublicVar._User + " Mac:" + Value.MACNO);
        prn.print("----------------------------------------");
        prn.print(PUtility.DataFullR("ยอดรวมค่าอาหาร                 ", 26) + PUtility.DataFull(DecFmt.format(frec.Food), 13));
        prn.print(PUtility.DataFullR("ยอดรวมค่าเครื่องดื่ม               ", 26) + PUtility.DataFull(DecFmt.format(frec.Drink), 13));
        prn.print(PUtility.DataFullR("ยอดรวมค่าสินค้าทั่วไป              ", 26) + PUtility.DataFull(DecFmt.format(frec.Product), 13));
        prn.print(PUtility.DataFullR("ยอดขายตามป้าย (Dept-Sum)       ", 26) + PUtility.DataFull(DecFmt.format(frec.Dept_Sum), 13));
        prn.print("                       ==============");
        prn.print(PUtility.DataFullR("ค่าบริการ Service       ", 20) + PUtility.DataFull(IntFmt.format(frec.ServiceCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Service), 13));
        prn.print(PUtility.DataFullR("Charge บัตรเครดิต       ", 20) + PUtility.DataFull(IntFmt.format(frec.ChargeCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Charge), 13));
        prn.print(PUtility.DataFullR("ส่วนลดสมาชิก VIP        ", 20) + PUtility.DataFull(IntFmt.format(frec.Vip_DiscCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Vip_Disc), 13));
        prn.print(PUtility.DataFullR("ส่วนลดเทศกาล           ", 20) + PUtility.DataFull(IntFmt.format(frec.Fast_DiscCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Fast_Disc), 13));
        prn.print(PUtility.DataFullR("ส่วนลดพนักงาน           ", 20) + PUtility.DataFull(IntFmt.format(frec.Emp_DiscCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Emp_Disc), 13));
        prn.print(PUtility.DataFullR("ส่วนลดพนักงาน Trainee   ", 20) + PUtility.DataFull(IntFmt.format(frec.Train_DiscCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Train_Disc), 13));
        prn.print(PUtility.DataFullR("ส่วนลดคูปอง              ", 20) + PUtility.DataFull(IntFmt.format(frec.Sub_DiscCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Sub_Disc), 13));
        prn.print(PUtility.DataFullR("ส่วนลดบาท               ", 20) + PUtility.DataFull(IntFmt.format(frec.Gen_RefundCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Gen_Refund), 13));
        prn.print(PUtility.DataFullR("ส่วนลด Promotion        ", 20) + PUtility.DataFull(IntFmt.format(frec.PromotionCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Promotion), 13));
        prn.print(PUtility.DataFullR("ส่วนลดพิเศษ (Special)    ", 20) + PUtility.DataFull(IntFmt.format(frec.SpacialCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Spacial), 13));
        prn.print(PUtility.DataFullR("ส่วนลดตามรายการ (Item)  ", 20) + PUtility.DataFull(IntFmt.format(frec.Item_DiscCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Item_Disc), 13));
        prn.print(PUtility.DataFullR("ส่วนลดบัตรคูปอง (Coupon)  ", 20) + PUtility.DataFull(IntFmt.format(frec.Cupon_DiscCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Cupon_Disc), 13));
        prn.print(PUtility.DataFullR("หักคืนเงินมัดจำ            ", 20) + PUtility.DataFull(IntFmt.format(frec.EarnestCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Earnest), 13));
        prn.print("----------------------------------------");
        prn.print(PUtility.DataFullR("ยอดขายสุทธิ (Net-Sales)           ", 26) + PUtility.DataFull(DecFmt.format(frec.Net_Sale), 13));
        prn.print("                       ==============");
        prn.print(PUtility.DataFullR("เงินสด Cash             ", 20) + PUtility.DataFull(IntFmt.format(frec.CashCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Cash), 13));
        prn.print(PUtility.DataFullR("บัตรกำนัล Gift Voucher   ", 20) + PUtility.DataFull(IntFmt.format(frec.GiftCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Gift), 13));
        prn.print(PUtility.DataFullR("ลูกหนี้การค้า              ", 20) + PUtility.DataFull(IntFmt.format(frec.ArPaymentCnt), 6) + PUtility.DataFull(DecFmt.format(frec.ArPayment), 13));
        if (frec.Credit_Card > 0) {
            if (CrArray != null) {
                int ArraySize = CrArray.length;
                for (int i = 0; i < ArraySize; i++) {
                    prn.print(PUtility.DataFullR(CrArray[i].CrName + "                     ", 20) + PUtility.DataFull(IntFmt.format(CrArray[i].CrCnt), 6) + PUtility.DataFull(DecFmt.format(CrArray[i].CrAmt), 13));
                }
            }
        }
        prn.print(PUtility.DataFullR("PAID-IN                ", 20) + PUtility.DataFull(IntFmt.format(frec.Paid_InCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Paid_In), 13));
        prn.print(PUtility.DataFullR("PAID-OUT               ", 20) + PUtility.DataFull(IntFmt.format(frec.Paid_OutCnt), 6) + PUtility.DataFull(DecFmt.format(frec.Paid_Out), 13));
        prn.print("----------------------------------------");
        prn.print(PUtility.DataFullR("ยอดขายสินค้า/บริการ คิดภาษี       ", 26) + PUtility.DataFull(DecFmt.format(frec.SaleVat), 13));
        prn.print(PUtility.DataFullR("ยอดขายไม่คิดภาษี                ", 26) + PUtility.DataFull(DecFmt.format(frec.SaleNonVat), 13));
        prn.print(PUtility.DataFullR("ภาษีมูลค่าเพิ่ม (Vat)             ", 26) + PUtility.DataFull(DecFmt.format(frec.VatAmt), 13));
        prn.print("----------------------------------------");
        prn.print(PUtility.DataFullR("จำนวนลูกค้าทั้งสิ้น                ", 26) + PUtility.DataFull(IntFmt.format(frec.Customer), 8) + " คน");
        prn.print(PUtility.DataFullR("จำนวนใบกำกับภาษีอย่างย่อ         ", 26) + PUtility.DataFull(IntFmt.format(frec.CntBill), 8) + " ใบ");
        prn.print("    เลขที่เริ่มต้น  :" + frec.StBill + "   ถึง  : " + frec.SpBill);
        prn.print(PUtility.DataFullR("ใบกำกับภาษีที่ยกเลิก       ", 20) + PUtility.DataFull(IntFmt.format(frec.CntBillVoid), 6) + PUtility.DataFull(DecFmt.format(frec.AmtBillVoid), 13));
        prn.print(PUtility.DataFullR("มูลค่าสินค้าที่ทำการ Void   ", 20) + PUtility.DataFull(IntFmt.format(frec.CntVoid), 6) + PUtility.DataFull(DecFmt.format(frec.VoidValue), 13));
        prn.print("----------------------------------------");
        prn.print("ประเภทการขาย   บิล        ลูกค้า  จำนวนเงิน");
        prn.print("----------------------------------------");
        prn.print("Eat-In      " + PUtility.DataFull(IntFmt.format(frec.Eat_In_Cnt), 6) + PUtility.DataFull(IntFmt.format(frec.Eat_In_Cust), 8) + PUtility.DataFull(DecFmt.format(frec.Eat_In_Amt), 13));
        prn.print("Take Away   " + PUtility.DataFull(IntFmt.format(frec.Take_AwayCnt), 6) + PUtility.DataFull(IntFmt.format(frec.Take_AwayCust), 8) + PUtility.DataFull(DecFmt.format(frec.Take_AwayAmt), 13));
        prn.print("Delivery    " + PUtility.DataFull(IntFmt.format(frec.DeliveryCnt), 6) + PUtility.DataFull(IntFmt.format(frec.DeliveryCust), 8) + PUtility.DataFull(DecFmt.format(frec.DeliveryAmt), 13));
        prn.print("Pinto       " + PUtility.DataFull(IntFmt.format(frec.PintoCnt), 6) + PUtility.DataFull(IntFmt.format(frec.PintoCust), 8) + PUtility.DataFull(DecFmt.format(frec.PintoAmt), 13));
        prn.print("Whole Sales " + PUtility.DataFull(IntFmt.format(frec.WholeCnt), 6) + PUtility.DataFull(IntFmt.format(frec.WholeCust), 8) + PUtility.DataFull(DecFmt.format(frec.WholeAmt), 13));
        prn.print("----------------------------------------");
        prn.print("");
        prn.print("");
        prn.print("");

        Double SumAmt = 0.0;
        prn.print("    รายงานการรับชำระจากลูกหนี้ภายนอก ");
        prn.print("          AR Payment Report");
        prn.print("รหัสพนักงานขาย : " + frec.Cashier1);
        prn.print(DatefmtThai.format(dateP) + " " + "Cashier:" + PublicVar._User + " Mac:" + Value.MACNO);
        prn.print("----------------------------------------");
        prn.print("AR Code    เลขที่ใบเสร็จรับเงิน/วันที่  จำนวนเงิน");
        prn.print("----------------------------------------");

        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from t_ar where (fat<>'V') and (cashier='" + frec.Cashier1 + "')";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    prn.print(PUtility.DataFull(rec.getString("arcode"), 4) + "  " + rec.getString("billno") + "  " + ShowDatefmt.format(rec.getDate("billdate")) + PUtility.DataFull(DecFmt.format(rec.getDouble("amount")), 9));
                    SumAmt = SumAmt + rec.getDouble("amount");
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        }

        prn.print("----------------------------------------");
        prn.print(PUtility.DataFullR("Total Amount  ", 26) + PUtility.DataFull(DecFmt.format(SumAmt), 13));
        prn.print("----------------------------------------");
        prn.print("");
        Double SumCash = 0.0;
        Double SumCupon = 0.0;
        int CntBill = 0;
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from billar where (fat<>'V') and (cashier='" + frec.Cashier1 + "')";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    CntBill++;
                    SumCash = SumCash + rec.getDouble("cash");
                    SumCupon = SumCupon + rec.getDouble("cupon");
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
        }

        prn.print(PUtility.DataFullR("     เงินสด Cash              ", 26) + PUtility.DataFull(DecFmt.format(SumCash), 13));
        prn.print(PUtility.DataFullR("     บัตรกำนัล Coupon          ", 26) + PUtility.DataFull(DecFmt.format(SumCupon), 13));
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from t_crar where (fat<>'V') and (cashier='" + frec.Cashier1 + "')";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    prn.print(PUtility.DataFullR(PUtility.SeekCreditName(rec.getString("crcode") + "                "), 20) + PUtility.DataFull(IntFmt.format(rec.getInt("crcnt")), 6) + PUtility.DataFull(DecFmt.format(rec.getDouble("cramt")), 13));

                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
        }
        prn.print("ยอดรับชำระ AR    : " + PUtility.DataFull(IntFmt.format(CntBill), 6));
        prn.print("----------------------------------------");
        prn.print(" ");
        prn.print("ยอดยกเลิกรายการ การรับชำระจากลูกหนี้ภายนอก");
        prn.print("AR Pay-No    Amount  Mac  User User Void ");
        prn.print("----------------------------------------");
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from billar where (fat='V') and (cashier='" + frec.Cashier1 + "')";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    prn.print(rec.getString("ref_no") + "  " + PUtility.DataFull(DecFmt.format(rec.getDouble("stotal")), 9) + "  " + rec.getString("terminal") + "  " + PUtility.DataFull(rec.getString("cashier"), 6) + "  " + PUtility.DataFull(rec.getString("uservoid"), 6));

                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
        }
        prn.print("----------------------------------------");
        prn.print("");
        prn.print("");
        prn.print("");
        if (ChkVoid) {
            prn.print("    รายงานการทำรายการ Void ");
            prn.print("           Void Report");
            prn.print("รหัสพนักงานขาย : " + frec.Cashier1);
            prn.print(DatefmtThai.format(dateP) + " " + "Cashier:" + PublicVar._User + " Mac:" + Value.MACNO);
            prn.print("----------------------------------------");
            prn.print("Mac Cashier Table Time  User-Void T_Void");
            prn.print("    Ref-No  PLU-Code       Qty    Amount");
            prn.print("----------------------------------------");
            int SumVoid = 0;
            Double SumAmount = 0.0;
            try {
                Statement stmt = mysql.getConnection().createStatement();
                String SqlQuery = "select *from t_sale where (r_void='V') and (cashier='" + frec.Cashier1 + "')";
                ResultSet rec = stmt.executeQuery(SqlQuery);
                rec.first();
                if (rec.getRow() == 0) {
                } else {
                    do {
                        prn.print(rec.getString("macno") + " " + PUtility.DataFullR(rec.getString("cashier"), 6) + " " + PUtility.DataFullR(rec.getString("r_table"), 5) + " " + PUtility.DataFullR(rec.getString("r_time"), 6) + "  " + PUtility.DataFullR(rec.getString("r_voiduser"), 10) + " " + PUtility.DataFullR(rec.getString("r_voidtime"), 6));
                        prn.print("     " + PUtility.DataFullR(rec.getString("r_pname"), 35));
                        prn.print("     " + rec.getString("r_refno") + " " + PUtility.DataFull(rec.getString("r_plucode"), 13) + " " + PUtility.DataFull(IntFmt.format(rec.getDouble("r_quan")), 4) + " " + PUtility.DataFull(DecFmt.format(rec.getDouble("r_total")), 8));
                        SumVoid++;
                        SumAmount = SumAmount + rec.getDouble("r_total");
                    } while (rec.next());
                }
                rec.close();
                stmt.close();
            } catch (SQLException e) {
                MSG.ERR(e.getMessage());
            }
            prn.print("----------------------------------------");
            prn.print("จำนวน Void :" + PUtility.DataFull(IntFmt.format(SumVoid), 5) + "  จำนวนเงิน :" + PUtility.DataFull(DecFmt.format(SumAmount), 11));
            prn.print("----------------------------------------");
            prn.print("");
            prn.print("");
            prn.print("");
        }
        prn.print(POSHW.getHeading1());
        prn.print(POSHW.getHeading2());
        prn.print(POSHW.getHeading3());
        prn.print(POSHW.getHeading4());
        //Print_Str(" ");
        prn.print("REG ID :" + Value.MACNO);
        prn.CutPaper();

        mysql.close();
    }

    public void ProcessGroup() {
        String TempGroup = "";
        int ArraySize = 0;
        boolean Found = false;
        PluRec[] GArray;
        GArray = new PluRec[1];
        ArraySize = 0;

        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from t_sale where (r_void<>'V') and (r_refund<>'V') Order by r_group";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            TempGroup = "";
            Double SumEQty = 0.0;
            Double SumEAmt = 0.0;
            Double SumTQty = 0.0;
            Double SumTAmt = 0.0;
            Double SumDQty = 0.0;
            Double SumDAmt = 0.0;
            Double SumPQty = 0.0;
            Double SumPAmt = 0.0;
            Double SumWQty = 0.0;
            Double SumWAmt = 0.0;
            Double SumSQty = 0.0;
            Double SumSAmt = 0.0;
            PluRec GroupRec = new PluRec();
            GroupRec.MacNo1 = "";
            GroupRec.MacNo2 = "";
            GroupRec.Cashier1 = "";
            GroupRec.Cashier2 = "";
            GroupRec.Group1 = "";
            GroupRec.Group2 = "";
            GroupRec.Plu1 = "";
            GroupRec.Plu2 = "";
            GroupRec.GroupCode = TempGroup;
            GroupRec.GroupName = PUtility.SeekGroupName(TempGroup);
            GroupRec.PCode = "";
            GroupRec.PName = "";

            GroupRec.E_Qty = GroupRec.E_Qty + SumEQty;
            GroupRec.E_Amt = GroupRec.E_Amt + SumEAmt;

            GroupRec.T_Qty = GroupRec.T_Qty + SumTQty;
            GroupRec.T_Amt = GroupRec.T_Amt + SumTAmt;

            GroupRec.D_Qty = GroupRec.D_Qty + SumDQty;
            GroupRec.D_Amt = GroupRec.D_Amt + SumDAmt;

            GroupRec.P_Qty = GroupRec.P_Qty + SumPQty;
            GroupRec.P_Amt = GroupRec.P_Amt + SumPAmt;

            GroupRec.W_Qty = GroupRec.W_Qty + SumWQty;
            GroupRec.W_Amt = GroupRec.W_Amt + SumWAmt;

            GroupRec.S_Qty = GroupRec.S_Qty + SumSQty;
            GroupRec.S_Amt = GroupRec.S_Amt + SumSAmt;
            GArray[ArraySize] = GroupRec;
            if (rec.getRow() == 0) {
            } else {
                TempGroup = rec.getString("r_group");
                do {
                    if (!TempGroup.equals(rec.getString("r_group"))) {
                        GroupRec = new PluRec();
                        GroupRec.MacNo1 = "";
                        GroupRec.MacNo2 = "";
                        GroupRec.Cashier1 = "";
                        GroupRec.Cashier2 = "";
                        GroupRec.Group1 = "";
                        GroupRec.Group2 = "";
                        GroupRec.Plu1 = "";
                        GroupRec.Plu2 = "";
                        GroupRec.GroupCode = TempGroup;
                        GroupRec.GroupName = PUtility.SeekGroupName(TempGroup);
                        GroupRec.PCode = "";
                        GroupRec.PName = "";

                        GroupRec.E_Qty = GroupRec.E_Qty + SumEQty;
                        GroupRec.E_Amt = GroupRec.E_Amt + SumEAmt;

                        GroupRec.T_Qty = GroupRec.T_Qty + SumTQty;
                        GroupRec.T_Amt = GroupRec.T_Amt + SumTAmt;

                        GroupRec.D_Qty = GroupRec.D_Qty + SumDQty;
                        GroupRec.D_Amt = GroupRec.D_Amt + SumDAmt;

                        GroupRec.P_Qty = GroupRec.P_Qty + SumPQty;
                        GroupRec.P_Amt = GroupRec.P_Amt + SumPAmt;

                        GroupRec.W_Qty = GroupRec.W_Qty + SumWQty;
                        GroupRec.W_Amt = GroupRec.W_Amt + SumWAmt;

                        GroupRec.S_Qty = GroupRec.S_Qty + SumSQty;
                        GroupRec.S_Amt = GroupRec.S_Amt + SumSAmt;
                        if (ArraySize == 0) {
                            GArray[ArraySize] = GroupRec;
                            ArraySize = GArray.length;
                        } else {
                            GArray = PUtility.addPluArray(GArray);
                            ArraySize = GArray.length;
                            GArray[ArraySize - 1] = GroupRec;
                        }
                        TempGroup = rec.getString("r_group");
                        SumEQty = 0.0;
                        SumEAmt = 0.0;
                        SumTQty = 0.0;
                        SumTAmt = 0.0;
                        SumDQty = 0.0;
                        SumDAmt = 0.0;
                        SumPQty = 0.0;
                        SumPAmt = 0.0;
                        SumWQty = 0.0;
                        SumWAmt = 0.0;
                        SumSQty = 0.0;
                        SumSAmt = 0.0;
                    }
                    if (rec.getString("r_etd").equals("E")) {
                        SumEQty = SumEQty + rec.getDouble("r_quan");
                        SumEAmt = SumEAmt + rec.getDouble("r_total");
                    }
                    if (rec.getString("r_etd").equals("T")) {
                        SumTQty = SumTQty + rec.getDouble("r_quan");
                        SumTAmt = SumTAmt + rec.getDouble("r_total");
                    }
                    if (rec.getString("r_etd").equals("D")) {
                        SumDQty = SumDQty + rec.getDouble("r_quan");
                        SumDAmt = SumDAmt + rec.getDouble("r_total");
                    }
                    if (rec.getString("r_etd").equals("P")) {
                        SumPQty = SumPQty + rec.getDouble("r_quan");
                        SumPAmt = SumPAmt + rec.getDouble("r_total");
                    }
                    if (rec.getString("r_etd").equals("W")) {
                        SumWQty = SumWQty + rec.getDouble("r_quan");
                        SumWAmt = SumWAmt + rec.getDouble("r_total");
                    }
                    SumSQty = SumSQty + rec.getDouble("r_quan");
                    SumSAmt = SumSAmt + rec.getDouble("r_total");
                } while (rec.next());
                if (SumSQty > 0) {
                    GroupRec = new PluRec();
                    GroupRec.MacNo1 = "";
                    GroupRec.MacNo2 = "";
                    GroupRec.Cashier1 = "";
                    GroupRec.Cashier2 = "";
                    GroupRec.Group1 = "";
                    GroupRec.Group2 = "";
                    GroupRec.Plu1 = "";
                    GroupRec.Plu2 = "";
                    GroupRec.GroupCode = TempGroup;
                    GroupRec.GroupName = PUtility.SeekGroupName(TempGroup);
                    GroupRec.PCode = "";
                    GroupRec.PName = "";

                    GroupRec.E_Qty = GroupRec.E_Qty + SumEQty;
                    GroupRec.E_Amt = GroupRec.E_Amt + SumEAmt;

                    GroupRec.T_Qty = GroupRec.T_Qty + SumTQty;
                    GroupRec.T_Amt = GroupRec.T_Amt + SumTAmt;

                    GroupRec.D_Qty = GroupRec.D_Qty + SumDQty;
                    GroupRec.D_Amt = GroupRec.D_Amt + SumDAmt;

                    GroupRec.P_Qty = GroupRec.P_Qty + SumPQty;
                    GroupRec.P_Amt = GroupRec.P_Amt + SumPAmt;

                    GroupRec.W_Qty = GroupRec.W_Qty + SumWQty;
                    GroupRec.W_Amt = GroupRec.W_Amt + SumWAmt;

                    GroupRec.S_Qty = GroupRec.S_Qty + SumSQty;
                    GroupRec.S_Amt = GroupRec.S_Amt + SumSAmt;
                    if (ArraySize == 0) {
                        GArray[ArraySize] = GroupRec;
                        ArraySize = GArray.length;
                    } else {
                        GArray = PUtility.addPluArray(GArray);
                        ArraySize = GArray.length;
                        GArray[ArraySize - 1] = GroupRec;
                    }
                }
            }

            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        } finally {
            mysql.close();
        }

        PrintGroup(GArray);
    }

    public void PrintGroup(PluRec[] GArray) {
        Double SumEQty = 0.0;
        Double SumEAmt = 0.0;
        Double SumTQty = 0.0;
        Double SumTAmt = 0.0;
        Double SumDQty = 0.0;
        Double SumDAmt = 0.0;
        Double SumPQty = 0.0;
        Double SumPAmt = 0.0;
        Double SumWQty = 0.0;
        Double SumWAmt = 0.0;
        Double SumSQty = 0.0;
        Double SumSAmt = 0.0;
        int ArraySize = GArray.length;

        prn.InitPrinter();
        prn.print("         รายงานการขายตามกลุ่มสินค้า");
        prn.print("           (Department Report)");
        prn.print("         (Automatic Sum XReport)");
        prn.print("หมายเลขเครื่อง : รวมทุกเครื่อง");
        prn.print(" ");
        Date dateP = new Date();
        prn.print(DatefmtThai.format(dateP) + " " + "Cashier:" + PublicVar._User + " Mac:" + Value.MACNO);
        prn.print("----------------------------------------");
        prn.print("รายละเอียด");
        prn.print("    .....EAT IN.....   ...TAKE AWAY.....");
        prn.print("    ....DELIVERY....   .....PINTO.......");
        prn.print("    ...WHOLE SALE...   .....TOTAL.......");
        prn.print("----------------------------------------");
        if (GArray[0].S_Qty > 0) {
            for (int i = 0; i < ArraySize; i++) {

                prn.print(PUtility.DataFullR(GArray[i].GroupCode, 4) + "  " + GArray[i].GroupName);
                prn.print(PUtility.DataFull(IntFmt.format(GArray[i].E_Qty), 6) + PUtility.DataFull(DecFmt.format(GArray[i].E_Amt), 12) + PUtility.DataFull(IntFmt.format(GArray[i].T_Qty), 6) + PUtility.DataFull(DecFmt.format(GArray[i].T_Amt), 12));
                prn.print(PUtility.DataFull(IntFmt.format(GArray[i].D_Qty), 6) + PUtility.DataFull(DecFmt.format(GArray[i].D_Amt), 12) + PUtility.DataFull(IntFmt.format(GArray[i].P_Qty), 6) + PUtility.DataFull(DecFmt.format(GArray[i].P_Amt), 12));
                prn.print(PUtility.DataFull(IntFmt.format(GArray[i].W_Qty), 6) + PUtility.DataFull(DecFmt.format(GArray[i].W_Amt), 12) + PUtility.DataFull(IntFmt.format(GArray[i].S_Qty), 6) + PUtility.DataFull(DecFmt.format(GArray[i].S_Amt), 12));

                SumEQty = SumEQty + GArray[i].E_Qty;
                SumEAmt = SumEAmt + GArray[i].E_Amt;
                SumTQty = SumTQty + GArray[i].T_Qty;
                SumTAmt = SumTAmt + GArray[i].T_Amt;
                SumDQty = SumDQty + GArray[i].D_Qty;
                SumDAmt = SumDAmt + GArray[i].D_Amt;
                SumPQty = SumPQty + GArray[i].P_Qty;
                SumPAmt = SumPAmt + GArray[i].P_Amt;
                SumWQty = SumWQty + GArray[i].W_Qty;
                SumWAmt = SumWAmt + GArray[i].W_Amt;
                SumSQty = SumSQty + GArray[i].S_Qty;
                SumSAmt = SumSAmt + GArray[i].S_Amt;
            }
        }
        prn.print("----------------------------------------");
        prn.print("***Subtotal***");
        prn.print(PUtility.DataFull(IntFmt.format(SumEQty), 6) + PUtility.DataFull(DecFmt.format(SumEAmt), 12) + PUtility.DataFull(IntFmt.format(SumTQty), 6) + PUtility.DataFull(DecFmt.format(SumTAmt), 12));
        prn.print(PUtility.DataFull(IntFmt.format(SumDQty), 6) + PUtility.DataFull(DecFmt.format(SumDAmt), 12) + PUtility.DataFull(IntFmt.format(SumPQty), 6) + PUtility.DataFull(DecFmt.format(SumPAmt), 12));
        prn.print(PUtility.DataFull(IntFmt.format(SumWQty), 6) + PUtility.DataFull(DecFmt.format(SumWAmt), 12) + PUtility.DataFull(IntFmt.format(SumSQty), 6) + PUtility.DataFull(DecFmt.format(SumSAmt), 12));

        prn.print("----------------------------------------");
        prn.print(" ");
        prn.print(" ");
        prn.print(" ");
        prn.print(POSHW.getHeading1());
        prn.print(POSHW.getHeading2());
        prn.print(POSHW.getHeading3());
        prn.print(POSHW.getHeading4());
        prn.print("REG ID :" + Value.MACNO);
        prn.CutPaper();

    }

    public void ProcessPlu() {
        String TempGroup = "";
        String TempPlu = "";
        String TempName = "";
        int ArraySize = 0;
        boolean Found = false;
        PluRec[] GArray;
        GArray = new PluRec[1];
        ArraySize = 0;

        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from t_sale where (r_void<>'V') and (r_refund<>'V') Order by r_group,r_plucode";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            TempGroup = "";
            TempPlu = "";
            TempName = "";
            Double SumEQty = 0.0;
            Double SumEAmt = 0.0;
            Double SumTQty = 0.0;
            Double SumTAmt = 0.0;
            Double SumDQty = 0.0;
            Double SumDAmt = 0.0;
            Double SumPQty = 0.0;
            Double SumPAmt = 0.0;
            Double SumWQty = 0.0;
            Double SumWAmt = 0.0;
            Double SumSQty = 0.0;
            Double SumSAmt = 0.0;
            PluRec GroupRec = new PluRec();
            GroupRec.MacNo1 = "";
            GroupRec.MacNo2 = "";
            GroupRec.Cashier1 = "";
            GroupRec.Cashier2 = "";
            GroupRec.Group1 = "";
            GroupRec.Group2 = "";
            GroupRec.Plu1 = "";
            GroupRec.Plu2 = "";
            GroupRec.GroupCode = TempGroup;
            GroupRec.GroupName = PUtility.SeekGroupName(TempGroup);
            GroupRec.PCode = TempPlu;
            GroupRec.PName = TempName;

            GroupRec.E_Qty = GroupRec.E_Qty + SumEQty;
            GroupRec.E_Amt = GroupRec.E_Amt + SumEAmt;

            GroupRec.T_Qty = GroupRec.T_Qty + SumTQty;
            GroupRec.T_Amt = GroupRec.T_Amt + SumTAmt;

            GroupRec.D_Qty = GroupRec.D_Qty + SumDQty;
            GroupRec.D_Amt = GroupRec.D_Amt + SumDAmt;

            GroupRec.P_Qty = GroupRec.P_Qty + SumPQty;
            GroupRec.P_Amt = GroupRec.P_Qty + SumPAmt;

            GroupRec.W_Qty = GroupRec.W_Qty + SumWQty;
            GroupRec.W_Amt = GroupRec.W_Qty + SumWAmt;

            GroupRec.S_Qty = GroupRec.S_Qty + SumSQty;
            GroupRec.S_Amt = GroupRec.S_Amt + SumSAmt;

            GArray[0] = GroupRec;
            if (rec.getRow() == 0) {
            } else {
                TempGroup = rec.getString("r_group");
                TempPlu = rec.getString("r_plucode");
                TempName = rec.getString("r_pname");
                do {
                    if (!TempPlu.equals(rec.getString("r_plucode"))) {
                        GroupRec = new PluRec();
                        GroupRec.MacNo1 = "";
                        GroupRec.MacNo2 = "";
                        GroupRec.Cashier1 = "";
                        GroupRec.Cashier2 = "";
                        GroupRec.Group1 = "";
                        GroupRec.Group2 = "";
                        GroupRec.Plu1 = "";
                        GroupRec.Plu2 = "";
                        GroupRec.GroupCode = TempGroup;
                        GroupRec.GroupName = PUtility.SeekGroupName(TempGroup);
                        GroupRec.PCode = TempPlu;
                        GroupRec.PName = TempName;

                        GroupRec.E_Qty = GroupRec.E_Qty + SumEQty;
                        GroupRec.E_Amt = GroupRec.E_Amt + SumEAmt;

                        GroupRec.T_Qty = GroupRec.T_Qty + SumTQty;
                        GroupRec.T_Amt = GroupRec.T_Amt + SumTAmt;

                        GroupRec.D_Qty = GroupRec.D_Qty + SumDQty;
                        GroupRec.D_Amt = GroupRec.D_Amt + SumDAmt;

                        GroupRec.P_Qty = GroupRec.P_Qty + SumPQty;
                        GroupRec.P_Amt = GroupRec.P_Qty + SumPAmt;

                        GroupRec.W_Qty = GroupRec.W_Qty + SumWQty;
                        GroupRec.W_Amt = GroupRec.W_Qty + SumWAmt;

                        GroupRec.S_Qty = GroupRec.S_Qty + SumSQty;
                        GroupRec.S_Amt = GroupRec.S_Amt + SumSAmt;
                        if (ArraySize == 0) {
                            GArray[ArraySize] = GroupRec;
                            ArraySize = GArray.length;
                        } else {
                            GArray = PUtility.addPluArray(GArray);
                            ArraySize = GArray.length;
                            GArray[ArraySize - 1] = GroupRec;
                        }
                        TempGroup = rec.getString("r_group");
                        TempPlu = rec.getString("r_plucode");
                        TempName = rec.getString("r_pname");
                        SumEQty = 0.0;
                        SumEAmt = 0.0;
                        SumTQty = 0.0;
                        SumTAmt = 0.0;
                        SumDQty = 0.0;
                        SumDAmt = 0.0;
                        SumPQty = 0.0;
                        SumPAmt = 0.0;
                        SumWQty = 0.0;
                        SumWAmt = 0.0;
                        SumSQty = 0.0;
                        SumSAmt = 0.0;
                    }
                    if (rec.getString("r_etd").equals("E")) {
                        SumEQty = SumEQty + rec.getDouble("r_quan");
                        SumEAmt = SumEAmt + rec.getDouble("r_total");
                    }
                    if (rec.getString("r_etd").equals("T")) {
                        SumTQty = SumTQty + rec.getDouble("r_quan");
                        SumTAmt = SumTAmt + rec.getDouble("r_total");
                    }
                    if (rec.getString("r_etd").equals("D")) {
                        SumDQty = SumDQty + rec.getDouble("r_quan");
                        SumDAmt = SumDAmt + rec.getDouble("r_total");
                    }
                    if (rec.getString("r_etd").equals("P")) {
                        SumPQty = SumPQty + rec.getDouble("r_quan");
                        SumPAmt = SumPQty + rec.getDouble("r_total");
                    }
                    if (rec.getString("r_etd").equals("W")) {
                        SumWQty = SumWQty + rec.getDouble("r_quan");
                        SumWAmt = SumWQty + rec.getDouble("r_total");
                    }
                    SumSQty = SumSQty + rec.getDouble("r_quan");
                    SumSAmt = SumSAmt + rec.getDouble("r_total");
                } while (rec.next());
                if (SumSQty > 0) {
                    GroupRec = new PluRec();
                    GroupRec.MacNo1 = "";
                    GroupRec.MacNo2 = "";
                    GroupRec.Cashier1 = "";
                    GroupRec.Cashier2 = "";
                    GroupRec.Group1 = "";
                    GroupRec.Group2 = "";
                    GroupRec.Plu1 = "";
                    GroupRec.Plu2 = "";
                    GroupRec.GroupCode = TempGroup;
                    GroupRec.GroupName = PUtility.SeekGroupName(TempGroup);
                    GroupRec.PCode = TempPlu;
                    GroupRec.PName = TempName;

                    GroupRec.E_Qty = GroupRec.E_Qty + SumEQty;
                    GroupRec.E_Amt = GroupRec.E_Amt + SumEAmt;

                    GroupRec.T_Qty = GroupRec.T_Qty + SumTQty;
                    GroupRec.T_Amt = GroupRec.T_Amt + SumTAmt;

                    GroupRec.D_Qty = GroupRec.D_Qty + SumDQty;
                    GroupRec.D_Amt = GroupRec.D_Amt + SumDAmt;

                    GroupRec.P_Qty = GroupRec.P_Qty + SumPQty;
                    GroupRec.P_Amt = GroupRec.P_Qty + SumPAmt;

                    GroupRec.W_Qty = GroupRec.W_Qty + SumWQty;
                    GroupRec.W_Amt = GroupRec.W_Qty + SumWAmt;

                    GroupRec.S_Qty = GroupRec.S_Qty + SumSQty;
                    GroupRec.S_Amt = GroupRec.S_Amt + SumSAmt;
                    if (ArraySize == 0) {
                        GArray[ArraySize] = GroupRec;
                        ArraySize = GArray.length;
                    } else {
                        GArray = PUtility.addPluArray(GArray);
                        ArraySize = GArray.length;
                        GArray[ArraySize - 1] = GroupRec;
                    }
                }
            }

            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        } finally {
            mysql.close();
        }

        PrintPlu(GArray);
    }

    public void PrintPlu(PluRec[] GArray) {
        Double SumEQty = 0.0;
        Double SumEAmt = 0.0;
        Double SumTQty = 0.0;
        Double SumTAmt = 0.0;
        Double SumDQty = 0.0;
        Double SumDAmt = 0.0;
        Double SumPQty = 0.0;
        Double SumPAmt = 0.0;
        Double SumWQty = 0.0;
        Double SumWAmt = 0.0;
        Double SumSQty = 0.0;
        Double SumSAmt = 0.0;
        int ArraySize = GArray.length;

        prn.InitPrinter();
        prn.print("         รายงานการขายตามรหัสสินค้า");
        prn.print("              (PLU Report)");
        prn.print("        (Automatic Sum XReport)");
        prn.print("หมายเลขเครื่อง : รวมทุกเตรื่อง");
        prn.print(" ");
        Date dateP = new Date();
        prn.print(DatefmtThai.format(dateP) + " " + "Cashier:" + PublicVar._User + " Mac:" + Value.MACNO);
        prn.print("----------------------------------------");
        prn.print("รายละเอียด");
        prn.print("    .....EAT IN.....   ...TAKE AWAY.....");
        prn.print("    ....DELIVERY....   .....PINTO.......");
        prn.print("    ...WHOLE SALE...   .....TOTAL.......");
        prn.print("----------------------------------------");
        String TempDept = "";
        if (ArraySize > 0) {
            TempDept = "";
        }
        if (GArray[0].S_Qty > 0) {
            for (int i = 0; i < ArraySize; i++) {
                if (!GArray[i].GroupCode.equals(TempDept)) {
                    prn.print(PUtility.DataFullR(GArray[i].GroupCode, 4) + "  " + GArray[i].GroupName);
                    TempDept = GArray[i].GroupCode;
                }

                prn.print(PUtility.DataFullR(GArray[i].PCode + "  " + GArray[i].PName, 38));
                prn.print(PUtility.DataFull(IntFmt.format(GArray[i].E_Qty), 6) + PUtility.DataFull(DecFmt.format(GArray[i].E_Amt), 12) + PUtility.DataFull(IntFmt.format(GArray[i].T_Qty), 6) + PUtility.DataFull(DecFmt.format(GArray[i].T_Amt), 12));
                prn.print(PUtility.DataFull(IntFmt.format(GArray[i].D_Qty), 6) + PUtility.DataFull(DecFmt.format(GArray[i].D_Amt), 12) + PUtility.DataFull(IntFmt.format(GArray[i].P_Qty), 6) + PUtility.DataFull(DecFmt.format(GArray[i].P_Amt), 12));
                prn.print(PUtility.DataFull(IntFmt.format(GArray[i].W_Qty), 6) + PUtility.DataFull(DecFmt.format(GArray[i].W_Amt), 12) + PUtility.DataFull(IntFmt.format(GArray[i].S_Qty), 6) + PUtility.DataFull(DecFmt.format(GArray[i].S_Amt), 12));

                SumEQty = SumEQty + GArray[i].E_Qty;
                SumEAmt = SumEAmt + GArray[i].E_Amt;
                SumTQty = SumTQty + GArray[i].T_Qty;
                SumTAmt = SumTAmt + GArray[i].T_Amt;
                SumDQty = SumDQty + GArray[i].D_Qty;
                SumDAmt = SumDAmt + GArray[i].D_Amt;
                SumPQty = SumPQty + GArray[i].P_Qty;
                SumPAmt = SumPAmt + GArray[i].P_Amt;
                SumWQty = SumWQty + GArray[i].W_Qty;
                SumWAmt = SumWAmt + GArray[i].W_Amt;
                SumSQty = SumSQty + GArray[i].S_Qty;
                SumSAmt = SumSAmt + GArray[i].S_Amt;
            }
        }
        prn.print("----------------------------------------");
        prn.print("***Subtotal***");
        prn.print(PUtility.DataFull(IntFmt.format(SumEQty), 6) + PUtility.DataFull(DecFmt.format(SumEAmt), 12) + PUtility.DataFull(IntFmt.format(SumTQty), 6) + PUtility.DataFull(DecFmt.format(SumTAmt), 12));
        prn.print(PUtility.DataFull(IntFmt.format(SumDQty), 6) + PUtility.DataFull(DecFmt.format(SumDAmt), 12) + PUtility.DataFull(IntFmt.format(SumPQty), 6) + PUtility.DataFull(DecFmt.format(SumPAmt), 12));
        prn.print(PUtility.DataFull(IntFmt.format(SumWQty), 6) + PUtility.DataFull(DecFmt.format(SumWAmt), 12) + PUtility.DataFull(IntFmt.format(SumSQty), 6) + PUtility.DataFull(DecFmt.format(SumSAmt), 12));

        prn.print("----------------------------------------");
        prn.print(" ");
        prn.print(" ");
        prn.print(" ");
        prn.print(POSHW.getHeading1());
        prn.print(POSHW.getHeading2());
        prn.print(POSHW.getHeading3());
        prn.print(POSHW.getHeading4());
        prn.print("REG ID :" + Value.MACNO);
        prn.CutPaper();

    }

    public void ProcessHourly() {
        String MacNo1 = Value.MACNO;
        String MacNo2 = Value.MACNO;
        int C0 = 0;
        int C1 = 0;
        int C2 = 0;
        int C3 = 0;
        int C4 = 0;
        int C5 = 0;
        int C6 = 0;
        int C7 = 0;
        int C8 = 0;
        int C9 = 0;
        int C10 = 0;
        int C11 = 0;
        int C12 = 0;
        int C13 = 0;
        int C14 = 0;
        int C15 = 0;
        int C16 = 0;
        int C17 = 0;
        int C18 = 0;
        int C19 = 0;
        int C20 = 0;
        int C21 = 0;
        int C22 = 0;
        int C23 = 0;
        int SumC = 0;

        int B0 = 0;
        int B1 = 0;
        int B2 = 0;
        int B3 = 0;
        int B4 = 0;
        int B5 = 0;
        int B6 = 0;
        int B7 = 0;
        int B8 = 0;
        int B9 = 0;
        int B10 = 0;
        int B11 = 0;
        int B12 = 0;
        int B13 = 0;
        int B14 = 0;
        int B15 = 0;
        int B16 = 0;
        int B17 = 0;
        int B18 = 0;
        int B19 = 0;
        int B20 = 0;
        int B21 = 0;
        int B22 = 0;
        int B23 = 0;
        int SumB = 0;

        Double S0 = 0.0;
        Double S1 = 0.0;
        Double S2 = 0.0;
        Double S3 = 0.0;
        Double S4 = 0.0;
        Double S5 = 0.0;
        Double S6 = 0.0;
        Double S7 = 0.0;
        Double S8 = 0.0;
        Double S9 = 0.0;
        Double S10 = 0.0;
        Double S11 = 0.0;
        Double S12 = 0.0;
        Double S13 = 0.0;
        Double S14 = 0.0;
        Double S15 = 0.0;
        Double S16 = 0.0;
        Double S17 = 0.0;
        Double S18 = 0.0;
        Double S19 = 0.0;
        Double S20 = 0.0;
        Double S21 = 0.0;
        Double S22 = 0.0;
        Double S23 = 0.0;
        Double SumS = 0.0;
        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from billno where (b_void<>'V')";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            String XTime = "";
            String TempTime = "";
            if (rec.getRow() == 0) {
            } else {
                do {
                    TempTime = rec.getString("b_ontime");
                    XTime = rec.getString("b_ontime").substring(0, 2);
                    if (XTime.equals("00")) {
                        B0++;
                        C0 = C0 + rec.getInt("b_cust");
                        S0 = S0 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("01")) {
                        B1++;
                        C1 = C1 + rec.getInt("b_cust");
                        S1 = S1 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("02")) {
                        B2++;
                        C2 = C2 + rec.getInt("b_cust");
                        S2 = S2 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("03")) {
                        B3++;
                        C3 = C0 + rec.getInt("b_cust");
                        S3 = S3 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("04")) {
                        B4++;
                        C4 = C4 + rec.getInt("b_cust");
                        S4 = S4 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("05")) {
                        B5++;
                        C5 = C5 + rec.getInt("b_cust");
                        S5 = S5 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("06")) {
                        B6++;
                        C6 = C6 + rec.getInt("b_cust");
                        S6 = S6 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("07")) {
                        B7++;
                        C7 = C7 + rec.getInt("b_cust");
                        S7 = S7 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("08")) {
                        B8++;
                        C8 = C8 + rec.getInt("b_cust");
                        S8 = S8 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("09")) {
                        B9++;
                        C9 = C9 + rec.getInt("b_cust");
                        S9 = S9 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("10")) {
                        B10++;
                        C10 = C10 + rec.getInt("b_cust");
                        S10 = S10 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("11")) {
                        B11++;
                        C11 = C11 + rec.getInt("b_cust");
                        S11 = S11 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("12")) {
                        B12++;
                        C12 = C12 + rec.getInt("b_cust");
                        S12 = S12 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("13")) {
                        B13++;
                        C13 = C13 + rec.getInt("b_cust");
                        S13 = S13 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("14")) {
                        B14++;
                        C14 = C14 + rec.getInt("b_cust");
                        S14 = S14 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("15")) {
                        B15++;
                        C15 = C15 + rec.getInt("b_cust");
                        S15 = S15 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("16")) {
                        B16++;
                        C16 = C16 + rec.getInt("b_cust");
                        S16 = S16 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("17")) {
                        B17++;
                        C17 = C17 + rec.getInt("b_cust");
                        S17 = S17 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("18")) {
                        B18++;
                        C18 = C18 + rec.getInt("b_cust");
                        S18 = S18 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("19")) {
                        B19++;
                        C19 = C19 + rec.getInt("b_cust");
                        S19 = S19 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("20")) {
                        B20++;
                        C20 = C20 + rec.getInt("b_cust");
                        S20 = S20 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("21")) {
                        B21++;
                        C21 = C21 + rec.getInt("b_cust");
                        S21 = S21 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("22")) {
                        B22++;
                        C22 = C22 + rec.getInt("b_cust");
                        S22 = S22 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    if (XTime.equals("23")) {
                        B23++;
                        C23 = C23 + rec.getInt("b_cust");
                        S23 = S23 + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));
                    }
                    SumB++;
                    SumC = SumC + rec.getInt("b_cust");
                    SumS = SumS + (rec.getDouble("b_netvat") + rec.getDouble("b_netnonvat"));

                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        } finally {
            mysql.close();
        }

        int ArraySize = 0;
        HourlyRec HRec = new HourlyRec();
        HourlyRec[] HArray;
        HArray = new HourlyRec[1];
        if (ArraySize == 0) {
            HRec = new HourlyRec();
            HRec.TTime = "00:00";
            HRec.TBill = B0;
            HRec.TCust = C0;
            HRec.TAmount = S0;
            ArraySize = HArray.length;
            HArray[ArraySize - 1] = HRec;
        }
        HourlyRec HRec1 = new HourlyRec();
        HRec1.TTime = "01:00";
        HRec1.TBill = B1;
        HRec1.TCust = C1;
        HRec1.TAmount = S1;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec1;
        HourlyRec HRec2 = new HourlyRec();
        HRec2.TTime = "02:00";
        HRec2.TBill = B2;
        HRec2.TCust = C2;
        HRec2.TAmount = S2;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec1;
        HourlyRec HRec3 = new HourlyRec();
        HRec3.TTime = "03:00";
        HRec3.TBill = B3;
        HRec3.TCust = C3;
        HRec3.TAmount = S3;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec3;
        HourlyRec HRec4 = new HourlyRec();
        HRec4.TTime = "04:00";
        HRec4.TBill = B4;
        HRec4.TCust = C4;
        HRec4.TAmount = S4;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec4;
        HourlyRec HRec5 = new HourlyRec();
        HRec5.TTime = "05:00";
        HRec5.TBill = B5;
        HRec5.TCust = C5;
        HRec5.TAmount = S5;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec5;
        HourlyRec HRec6 = new HourlyRec();
        HRec6.TTime = "06:00";
        HRec6.TBill = B6;
        HRec6.TCust = C6;
        HRec6.TAmount = S6;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec6;
        HourlyRec HRec7 = new HourlyRec();
        HRec7.TTime = "07:00";
        HRec7.TBill = B7;
        HRec7.TCust = C7;
        HRec7.TAmount = S7;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec7;
        HourlyRec HRec8 = new HourlyRec();
        HRec8.TTime = "08:00";
        HRec8.TBill = B8;
        HRec8.TCust = C8;
        HRec8.TAmount = S8;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec8;
        HourlyRec HRec9 = new HourlyRec();
        HRec9.TTime = "09:00";
        HRec9.TBill = B9;
        HRec9.TCust = C9;
        HRec9.TAmount = S9;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec9;
        HourlyRec HRec10 = new HourlyRec();
        HRec10.TTime = "10:00";
        HRec10.TBill = B10;
        HRec10.TCust = C10;
        HRec10.TAmount = S10;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec10;
        HourlyRec HRec11 = new HourlyRec();
        HRec11.TTime = "11:00";
        HRec11.TBill = B11;
        HRec11.TCust = C11;
        HRec11.TAmount = S11;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec11;
        HourlyRec HRec12 = new HourlyRec();
        HRec12.TTime = "12:00";
        HRec12.TBill = B12;
        HRec12.TCust = C12;
        HRec12.TAmount = S12;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec12;
        HourlyRec HRec13 = new HourlyRec();
        HRec13.TTime = "13:00";
        HRec13.TBill = B13;
        HRec13.TCust = C13;
        HRec13.TAmount = S13;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec13;
        HourlyRec HRec14 = new HourlyRec();
        HRec14.TTime = "14:00";
        HRec14.TBill = B14;
        HRec14.TCust = C14;
        HRec14.TAmount = S14;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec14;
        HourlyRec HRec15 = new HourlyRec();
        HRec15.TTime = "15:00";
        HRec15.TBill = B15;
        HRec15.TCust = C15;
        HRec15.TAmount = S15;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec15;
        HourlyRec HRec16 = new HourlyRec();
        HRec16.TTime = "16:00";
        HRec16.TBill = B16;
        HRec16.TCust = C16;
        HRec16.TAmount = S16;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec16;
        HourlyRec HRec17 = new HourlyRec();
        HRec17.TTime = "17:00";
        HRec17.TBill = B17;
        HRec17.TCust = C17;
        HRec17.TAmount = S17;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec17;
        HourlyRec HRec18 = new HourlyRec();
        HRec18.TTime = "18:00";
        HRec18.TBill = B18;
        HRec18.TCust = C18;
        HRec18.TAmount = S18;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec18;
        HourlyRec HRec19 = new HourlyRec();
        HRec19.TTime = "19:00";
        HRec19.TBill = B19;
        HRec19.TCust = C19;
        HRec19.TAmount = S19;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec19;
        HourlyRec HRec20 = new HourlyRec();
        HRec20.TTime = "20:00";
        HRec20.TBill = B20;
        HRec20.TCust = C20;
        HRec20.TAmount = S20;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec20;
        HourlyRec HRec21 = new HourlyRec();
        HRec21.TTime = "21:00";
        HRec21.TBill = B21;
        HRec21.TCust = C21;
        HRec21.TAmount = S21;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec21;
        HourlyRec HRec22 = new HourlyRec();
        HRec22.TTime = "22:00";
        HRec22.TBill = B22;
        HRec22.TCust = C22;
        HRec22.TAmount = S22;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec22;
        HourlyRec HRec23 = new HourlyRec();
        HRec23.TTime = "23:00";
        HRec23.TBill = B23;
        HRec23.TCust = C23;
        HRec23.TAmount = S23;
        HArray = PUtility.addHourlyArray(HArray);
        ArraySize = HArray.length;
        HArray[ArraySize - 1] = HRec23;

        PrintHourly(HArray, MacNo1, MacNo2);
    }

    public void PrintHourly(HourlyRec[] HArray, String MacNo1, String MacNo2) {
        Double SumB = 0.0;
        Double SumC = 0.0;
        Double SumS = 0.0;
        int ArraySize = HArray.length;

        prn.InitPrinter();
        prn.print("         รายงานการขายตามช่วงเวลา");
        prn.print("            (Hourly Report)");
        prn.print("        (Automatic Sum X-Report)");
        prn.print("หมายเลขเครื่อง : รวมทุกเครื่อง");
        prn.print(" ");
        Date dateP = new Date();
        prn.print(DatefmtThai.format(dateP) + " " + "Cashier:" + PublicVar._User + " Mac:" + Value.MACNO);
        prn.print("----------------------------------------");
        prn.print("เวลา    จำนวนบิล   จำนวนลูกค้า    จำนวนเงิน");
        prn.print("----------------------------------------");
        for (int i = 0; i < ArraySize; i++) {

            prn.print(HArray[i].TTime + "  " + PUtility.DataFull(IntFmt.format(HArray[i].TBill), 8) + PUtility.DataFull(IntFmt.format(HArray[i].TCust), 10) + PUtility.DataFull(DecFmt.format(HArray[i].TAmount), 13));

            SumB = SumB + HArray[i].TBill;
            SumC = SumC + HArray[i].TCust;
            SumS = SumS + HArray[i].TAmount;

        }

        prn.print("----------------------------------------");
        prn.print("Total  " + PUtility.DataFull(IntFmt.format(SumB), 8) + PUtility.DataFull(IntFmt.format(SumC), 10) + PUtility.DataFull(DecFmt.format(SumS), 13));

        prn.print("----------------------------------------");
        prn.print(" ");
        prn.print(" ");
        prn.print(" ");
        prn.print(POSHW.getHeading1());
        prn.print(POSHW.getHeading2());
        prn.print(POSHW.getHeading3());
        prn.print(POSHW.getHeading4());
        prn.print("REG ID :" + Value.MACNO);
        prn.CutPaper();

    }

    public void ProcessInv() {
        String MacNo1 = Value.MACNO;
        String MacNo2 = Value.MACNO;

        prn.InitPrinter();
        prn.print("         รายงานการพิมพ์ใบเสร็จรับเงิน");
        prn.print("             (Receipt Report)");
        prn.print("        (Automatic Sum X-Report)");
        prn.print("หมายเลขเครื่อง : รวมทุกเครื่อง");
        prn.print(" ");
        Date dateP = new Date();
        prn.print(DatefmtThai.format(dateP) + " " + "Cashier:" + PublicVar._User + " Mac:" + Value.MACNO);
        prn.print("----------------------------------------");
        prn.print("ใบเสร็จ   เวลาพิมพ์     จำนวนเงิน   ภาษี(Vat)");
        prn.print("----------------------------------------");
        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from billno order by b_macno,b_refno";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                String TempMacNo = "";
                do {
                    if (rec.getString("b_macno").equals(TempMacNo)) {
                        prn.print("Mac-No : " + rec.getString("b_macno"));
                        TempMacNo = rec.getString("b_macno");
                    }
                    if (rec.getString("b_void").equals("V")) {
                        prn.print("***Void โดย :" + rec.getString("b_voiduser") + "  " + rec.getString("b_voidtime"));
                    }
                    prn.print(rec.getString("b_refno") + " " + rec.getString("b_ontime") + " " + PUtility.DataFull(DecFmt.format(rec.getDouble("b_nettotal")), 12) + PUtility.DataFull(DecFmt.format(rec.getDouble("b_vat")), 10));
                    if (rec.getDouble("b_cash") != 0) {
                        prn.print("       " + "Cash...............:" + PUtility.DataFull(DecFmt.format(rec.getDouble("b_cash")), 12));
                    }
                    if (rec.getDouble("b_giftvoucher") != 0) {
                        prn.print("       " + "Gift Voucher.......:" + PUtility.DataFull(DecFmt.format(rec.getDouble("b_giftvoucher")), 12));
                    }
                    if (rec.getDouble("b_earnest") != 0) {
                        prn.print("       " + "Earnest............:" + PUtility.DataFull(DecFmt.format(rec.getDouble("b_earnest")), 12));
                    }
                    if (rec.getDouble("b_cramt1") != 0) {
                        prn.print("       " + "***" + PUtility.DataFullR(rec.getString("b_crcode1"), 8) + "........." + PUtility.DataFull(DecFmt.format(rec.getDouble("b_cramt1")), 12));
                    }
                    if (rec.getDouble("b_accramt") != 0) {
                        prn.print("       " + "AR-" + PUtility.DataFullR(rec.getString("b_accrcode"), 8) + "........." + PUtility.DataFull(DecFmt.format(rec.getDouble("b_accramt")), 12));
                        prn.print("       " + PUtility.DataFullR(PUtility.SeekArName(rec.getString("b_accrcode")), 30));
                    }
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        } finally {
            mysql.close();
        }

        prn.print("----------------------------------------");
        prn.print(" ");
        prn.print(" ");
        prn.print(" ");
        prn.print(POSHW.getHeading1());
        prn.print(POSHW.getHeading2());
        prn.print(POSHW.getHeading3());
        prn.print(POSHW.getHeading4());
        prn.print("REG ID :" + Value.MACNO);
        prn.CutPaper();

    }

    public void ProcessVoid() {
        String MacNo1 = Value.MACNO;
        String MacNo2 = Value.MACNO;
        String CashNo1 = "";
        String CashNo2 = "ZZZZZZ";

        prn.InitPrinter();
        prn.print("         รายงานการทำรายการ Void");
        prn.print("              (Void Report)");
        prn.print("         (Automatic Sum X-Report)");
        prn.print("หมายเลขเครื่อง : รวมทุกเครื่อง");
        prn.print("รหัสพนักงาน    :" + CashNo1 + " ..." + CashNo2);
        prn.print(" ");
        Date dateP = new Date();
        prn.print(DatefmtThai.format(dateP) + " " + "Cashier:" + PublicVar._User + " Mac:" + Value.MACNO);
        prn.print("----------------------------------------");
        prn.print("Mac Cashier Table Time  User-Void T_Void");
        prn.print("    Ref-No  PLU-Code       Qty    Amount");
        prn.print("----------------------------------------");
        int SumVoid = 0;
        Double SumAmount = 0.0;
        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from t_sale where (r_void='V') order by macno,cashier,r_time";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    prn.print(rec.getString("macno") + " " + PUtility.DataFullR(rec.getString("cashier"), 6) + " " + PUtility.DataFullR(rec.getString("r_table"), 5) + " " + PUtility.DataFullR(rec.getString("r_time"), 6) + "  " + PUtility.DataFullR(rec.getString("r_voiduser"), 10) + " " + PUtility.DataFullR(rec.getString("r_voidtime"), 6));
                    prn.print("     " + PUtility.DataFullR(rec.getString("r_pname"), 35));
                    prn.print("     " + rec.getString("r_refno") + " " + PUtility.DataFull(rec.getString("r_plucode"), 13) + " " + PUtility.DataFull(IntFmt.format(rec.getDouble("r_quan")), 4) + " " + PUtility.DataFull(DecFmt.format(rec.getDouble("r_total")), 8));
                    SumVoid++;
                    SumAmount = SumAmount + rec.getDouble("r_total");
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        } finally {
            mysql.close();
        }

        prn.print("----------------------------------------");
        prn.print("จำนวน Void :" + PUtility.DataFull(IntFmt.format(SumVoid), 5) + "  จำนวนเงิน :" + PUtility.DataFull(DecFmt.format(SumAmount), 11));
        prn.print("----------------------------------------");
        prn.print(" ");
        prn.print(" ");
        prn.print(" ");
        prn.print(POSHW.getHeading1());
        prn.print(POSHW.getHeading2());
        prn.print(POSHW.getHeading3());
        prn.print(POSHW.getHeading4());
        prn.print("REG ID :" + Value.MACNO);
        prn.CutPaper();

    }

    public void ProcessCredit() {
        String MacNo1 = Value.MACNO;
        String MacNo2 = Value.MACNO;
        String CashNo1 = "";
        String CashNo2 = "ZZZZZZ";
        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "delete from tempcredit where terminal='" + Value.MACNO + "'";
            stmt.executeUpdate(SqlQuery);
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        }

        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select crcode,DECODE(crid,'snpfood') as crno ,crapp,cramt from t_crar where (fat<>'V')";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    String TCrCode = rec.getString("crcode");
                    String TCrId = rec.getString("crno");
                    String TCrApp = rec.getString("crapp");
                    Double TCrAmt = rec.getDouble("cramt");
                    InsertTemp(TCrCode, TCrId, TCrApp, TCrAmt);
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
        }

        prn.InitPrinter();
        prn.print("         รายงานการรับชำระด้วยบัตรเครดิต");
        prn.print("               (Credit Report)");
        prn.print("          (Automatic Sum X-Report)");
        prn.print("หมายเลขเครื่อง : รวมทุกเครื่อง");
        prn.print("รหัสพนักงาน    :" + CashNo1 + " ..." + CashNo2);
        prn.print(" ");
        Date dateP = new Date();
        prn.print(DatefmtThai.format(dateP) + " " + "Cashier:" + PublicVar._User + " Mac:" + Value.MACNO);
        prn.print("----------------------------------------");
        prn.print("ประเภทบัตร    ชื่อบัตรเครดิต");
        prn.print("ลำดับ  หมายเลขบัตร     รหัสอนุมัติ    จำนวนเงิน");
        prn.print("----------------------------------------");
        int SumVoid = 0;
        String TempCr = "";
        int SumCard = 0;
        Double SumCardAmt = 0.0;
        int SumTotal = 0;
        Double SumTotalAmt = 0.0;
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from tempcredit where (terminal='" + Value.MACNO + "') order by crcode";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                prn.print(rec.getString("crcode") + "   " + PUtility.SeekCreditName(rec.getString("crcode")));
                TempCr = rec.getString("crcode");
                do {
                    if (!rec.getString("crcode").equals(TempCr)) {
                        prn.print("       Total Slip " + PUtility.DataFull(IntFmt.format(SumCard), 6) + "    " + PUtility.DataFull(DecFmt.format(SumCardAmt), 11));
                        prn.print("                 " + "-----------------------");
                        SumCard = 0;
                        SumCardAmt = 0.0;
                        prn.print(rec.getString("crcode") + "   " + PUtility.SeekCreditName(rec.getString("crcode")));
                        TempCr = rec.getString("crcode");
                    }
                    SumCard++;
                    SumCardAmt = SumCardAmt + rec.getDouble("cramt");
                    SumTotal++;
                    SumTotalAmt = SumTotalAmt + rec.getDouble("cramt");
                    String TempCrId = PUtility.Addzero(rec.getString("crid"), 16);
                    prn.print(PUtility.DataFull(IntFmt.format(SumCard), 5) + "  " + "XXXXXXXXXXXX" + TempCrId.substring(12, 16) + " " + PUtility.DataFullR(rec.getString("crapp"), 6) + PUtility.DataFull(DecFmt.format(rec.getDouble("cramt")), 9));

                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        }
        if (SumCard > 0) {
            prn.print("       Total Slip " + PUtility.DataFull(IntFmt.format(SumCard), 6) + "    " + PUtility.DataFull(DecFmt.format(SumCardAmt), 11));
            prn.print("                 " + "-----------------------");
        }
        prn.print("----------------------------------------");
        prn.print("Sum-Total Slip  " + PUtility.DataFull(IntFmt.format(SumTotal), 6) + "    " + PUtility.DataFull(DecFmt.format(SumTotalAmt), 13));
        prn.print("----------------------------------------");
        prn.print(" ");
        prn.print(" ");
        prn.print(" ");
        prn.print(POSHW.getHeading1());
        prn.print(POSHW.getHeading2());
        prn.print(POSHW.getHeading3());
        prn.print(POSHW.getHeading4());
        prn.print("REG ID :" + Value.MACNO);
        prn.CutPaper();

        mysql.close();

    }

    public void InsertTemp(String TCrCode, String TCrId, String TCrApp, Double TCrAmt) {
        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "insert into tempcredit (terminal,crcode,crid,crapp,cramt) "
                    + "values (?,?,?,?,?)";
            PreparedStatement prm = mysql.getConnection().prepareStatement(SqlQuery);
            prm.setString(1, Value.MACNO);
            prm.setString(2, TCrCode);
            prm.setString(3, TCrId);
            prm.setString(4, TCrApp);
            prm.setDouble(5, TCrAmt);
            prm.executeUpdate();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        } finally {
            mysql.close();
        }
    }

    public void ProcessGiftVoucher() {
        String MacNo1 = Value.MACNO;
        String MacNo2 = Value.MACNO;
        String CashNo1 = "";
        String CashNo2 = "ZZZZZZ";

        prn.InitPrinter();
        prn.print("       รายงานการรับชำระด้วยบัตรของขวัญ");
        prn.print("          (Gift Voucher Report)");
        prn.print("         (Automatic Sum X-Report)");
        prn.print("หมายเลขเครื่อง : รวมทุกเครื่อง");
        prn.print("รหัสพนักงาน    :" + CashNo1 + " ..." + CashNo2);
        prn.print(" ");
        Date dateP = new Date();
        prn.print(DatefmtThai.format(dateP) + " " + "Cashier:" + PublicVar._User + " Mac:" + Value.MACNO);
        prn.print("----------------------------------------");
        prn.print("Code                  NO          Amount");
        prn.print("----------------------------------------");
        int Sumtotal = 0;
        Double SumtotalAmount = 0.0;
        /**
         * * OPEN CONNECTION **
         */
        MySQLConnect mysql = new MySQLConnect();
        mysql.open();
        try {
            Statement stmt = mysql.getConnection().createStatement();
            String SqlQuery = "select *from t_gift where (fat='V') order by giftbarcode";
            ResultSet rec = stmt.executeQuery(SqlQuery);
            rec.first();
            if (rec.getRow() == 0) {
            } else {
                do {
                    prn.print(PUtility.DataFullR(rec.getString("giftbarcode"), 27) + "  " + PUtility.DataFull(DecFmt.format(rec.getDouble("giftamt")), 9));
                    Sumtotal++;
                    SumtotalAmount = SumtotalAmount + rec.getDouble("giftamt");
                } while (rec.next());
            }
            rec.close();
            stmt.close();
        } catch (SQLException e) {
            MSG.ERR(e.getMessage());
            e.printStackTrace();
        } finally {
            mysql.close();
        }

        prn.print("----------------------------------------");
        prn.print("Sum-Total Gift " + PUtility.DataFull(IntFmt.format(Sumtotal), 6) + "     " + PUtility.DataFull(DecFmt.format(SumtotalAmount), 13));
        prn.print("----------------------------------------");
        prn.print(" ");
        prn.print(" ");
        prn.print(" ");
        prn.print(POSHW.getHeading1());
        prn.print(POSHW.getHeading2());
        prn.print(POSHW.getHeading3());
        prn.print(POSHW.getHeading4());
        prn.print("REG ID :" + Value.MACNO);
        prn.CutPaper();

    }

    public void ProcessCharge() {

        if (!Value.getComPort().equals("NONE")) {
            double Sum1 = 0.0;
            double Sum2 = 0.0;
            int Cnt1 = 0;
            int Cnt2 = 0;
            if (Value.printdriver) {

            } else if (prn.OpenPrint(Value.getComPort())) {
                prn.InitPrinter();
                prn.print(POSHW.getHeading1());
                prn.print(POSHW.getHeading2());
                prn.print(POSHW.getHeading3());
                prn.print(POSHW.getHeading4());
                prn.print("REG ID :" + Value.MACNO);
                prn.print(" ");
                prn.print("        รายงานการเบิกสินค้าประจำวัน");
                prn.print("       (Automatic Sum X-Report)");
                prn.print("แสดงรวมทุกเครื่อง");
                prn.print(" ");
                prn.print(DatefmtThai.format(date) + " " + "Cashier:" + PublicVar._User + " Mac:" + Value.MACNO);
                prn.print("----------------------------------------");
                prn.print("ประเภทการเบิก          เวลาพิมพ์  เลขที่เอกสาร ");
                prn.print("รหัสหน่วยงาน/พนักงาน    จำนวนเงิน    Cashier ");
                prn.print("----------------------------------------");
                /**
                 * * OPEN CONNECTION **
                 */
                MySQLConnect mysql = new MySQLConnect();
                mysql.open();
                try {
                    Statement stmt = mysql.getConnection().createStatement();
                    String SqlQuery = "select *from billnocharge order by b_refno";
                    ResultSet rec = stmt.executeQuery(SqlQuery);
                    rec.first();
                    if (rec.getRow() == 0) {
                    } else {
                        do {
                            if (rec.getString("b_void").equals("V")) {
                                prn.print("***Void โดย :" + rec.getString("b_voiduser") + "  " + rec.getString("b_voidtime"));
                            }
                            prn.print(PUtility.DataFullR(rec.getString("b_chargename"), 19) + "   " + rec.getString("b_ontime") + "  " + rec.getString("b_refno"));
                            prn.print("  " + PUtility.DataFullR(rec.getString("b_chargecode"), 15) + PUtility.DataFull(DecFmt.format(rec.getDouble("b_total")), 12) + "  " + rec.getString("b_cashier"));
                            if (!rec.getString("b_void").equals("V")) {
                                if (rec.getString("b_chargegroup").equals("1")) {
                                    Sum1 = Sum1 + rec.getDouble("b_total");
                                    Cnt1 = Cnt1 + 1;
                                } else {
                                    Sum2 = Sum2 + rec.getDouble("b_total");
                                    Cnt2 = Cnt2 + 1;
                                }
                            }
                        } while (rec.next());
                    }
                    rec.close();
                    stmt.close();
                    prn.print("----------------------------------------");
                    prn.print("Sum-Total             บิล            บาท ");
                    prn.print("  หน่วยงาน     " + PUtility.DataFull(IntFmt.format(Cnt1), 10) + "   " + PUtility.DataFull(DecFmt.format(Sum1), 12));
                    prn.print("  บุคคล        " + PUtility.DataFull(IntFmt.format(Cnt2), 10) + "   " + PUtility.DataFull(DecFmt.format(Sum2), 12));

                } catch (SQLException e) {
                    MSG.ERR(e.getMessage());
                    e.printStackTrace();
                } finally {
                    mysql.close();
                }

                prn.print("----------------------------------------");
                prn.print(" ");
                prn.print(" ");
                prn.print(" ");
                prn.CutPaper();
                prn.closePrint();
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                AutoSumXRep dialog = new AutoSumXRep(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ChkCharge;
    private javax.swing.JButton bntExit;
    private javax.swing.JButton bntOK;
    private javax.swing.JButton bntSelectAll;
    private javax.swing.JCheckBox chkCashier;
    private javax.swing.JCheckBox chkCredit;
    private javax.swing.JCheckBox chkGiftVoucher;
    private javax.swing.JCheckBox chkGroup;
    private javax.swing.JCheckBox chkHourly;
    private javax.swing.JCheckBox chkPlu;
    private javax.swing.JCheckBox chkReceipt;
    private javax.swing.JCheckBox chkTerminal;
    private javax.swing.JCheckBox chkVoid;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables
}
